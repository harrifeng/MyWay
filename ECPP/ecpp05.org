* Chapter 5: Implementations
** Item 26: Postpone variable definitions as long as possible
   + c++和c不同的地方在于c++鼓励尽可能精确的在需要这个变量的时候在申请，下面是
     一个范例，encrypted的定义太早了，如果中间代码抛出异常，那么这变量的定义就
     浪费了
     #+begin_src c++
       std::string encyptPassword() {
           using namespace std;
           string encypted;
           if (password.length() < MinimumPasswodLength) {
               throw logic_error ("Password is too short !");
           }
       
           return encypted;
       }
     #+end_src
   + 定义变量一定要将其初始化，而且最好不要先default ctor，然后operator=
     #+begin_src c++
       //first default ctor, then oprator=
       std::string encrypted;
       encrypted = password;
       
       //only one ctor
       std::string encrypted(password);
     #+end_src
   + 循环中定义变量有如下两者情况:
     #+begin_src c++
       //Plan A: 1 ctor + 1 dtor + n assignment
       Widget w;
       for (int i = 0; i < n; ++i) {
           w = some_value ;
       }
       
       //Plan B :n ctor + n dtor 
       for (int i = 0; i < n; ++i) {
           Widget w(some_value);
       }
     #+end_src
     - 因为n个赋值 < n个(ctor+dtor),所以plan A效率更高
     - 但是plan B的清晰度更好，更容易理解，如果清晰度更重要，那就使用plan B
** Item 27: Minimize casting
   + 比起Java或者C#，c++中的转型要危险的多，所以不到万不得已，不要转型
   + 传统c代码中的转型不容易被察觉，在c++中引入了更容易让人察觉的转型方式
     #+begin_src c++
       class Widget {
       public:
           //only time to use an old-style cast is when you
           //want to call an explicit ctor to pass an object
           //to a function
           explicit Widget(int size);
           //...
       };
       
       void doSomeWork(const Widget& w);
       doSomeWork(Widget(15));      //old-style casting
       doSomeWork(static_cast<Widget>(15)); //new-style casting
     #+end_src
   + static_cast 是最初等，最常用的转换，而且相互转换类型之间有很强关联性
   + reinterpret_cast用在指针，以及int类型(和指针长度相互)之间任意的转换
   + const_cast是除去对象的常量性
     #+begin_src c++
       const int i = 56;
       const int *ptr = &i;
       int *ptr2 = const_cast<int*>(ptr);
       /* old-style cast would be
        * ptr2 = (int*)(ptr);
        */
       cout << *ptr << endl;
       ,*ptr2 = 34;
       cout << *ptr << endl;
     #+end_src
   + 前面说的三种转换，都是new-style和old-style都有的，只有dynamic_cast
     是c++新加的，因为它和c++的多态机制有很大关系
     #+begin_src c++
       //para is set to base class, determine real class
       //at last.
       void doSomething (Base *obj) {
           Derived objD = dynamic_cast<Derived *> (obj);
           if (objD) {
               // use obj as derived class
           }
           else {
               // if obj is not derived class, work normally.
           }
       }
     #+end_src
   + 值得注意的是，dynamic_cast的效率非常差，不到万不得已，不要使用。
** Item 28: Avoid returning "handles" to object internals
   + 其实前面有个item涉及到这个内容，就是return的使用，我们不要返回对类内部数据的
     取地址和引用.下面例子就蕴含着private数据被更改的危险
     #+begin_src c++
       class Point {
       public:
           Point(int x, int y);
           void setX(int newVal);
           void setY(int newVal);
       };
       struct RectData {
           Point ulhc;     //upper left-hand corner
           Point lrhc;     //lower right-hand corner
       };
       class Rectangle {
       public:
           Point& upperLeft() const {return pData->ulhc;}
           Point& lowerRight() const {return pData->lrhc;}
       private:
           std::tr1:shared_ptr<RectData> pData;
       };
       
       const Rectangle rec(coord1, coord2);
       rec.upperLeft().setX(50); //Oops! const function changed the private value 
     #+end_src
   + 可能的解决办法如下
     #+begin_src c++
       const Point& upperLeft() const {return pData->ulhc;}
       const Point& lowerRight() const {return pData->lrhc;}
     #+end_src
   + 上面的解决办法依然不完美，尽管返回值设置成了const，还是存在这破坏封装性的危险, 下面例子
     中，boundingBox返回的是一个temp object，这个object在返回以后就被销毁了(重新在当前
     stack 申请一个变量放置),但是你却返回了这个temp的地址(通过upperLeft)
     #+begin_src c++
       class GUIObject {...};
       const Rectangele boundingBox(const GUIObject& obj); //return value const
       GUIObject *pgo;
       const Point* pUpperLeft = &(boundingBox(*pgo).upperLeft());
     #+end_src
   + 总而言之，放弃return handles to object internals是最好的解决办法
** Item 29: Strive for exception-safe 
   + 在解释什么是exception-safe之前，我们先看个反例
     #+begin_src c++
       class PrettyMenu {
       public:
           void changeBackground(std::istream& imgSrc);
           //...
       private:
           Mutex mutex;      //mutex for this object
       
           Image *bgImage;
           int imageChanges;   //how many times image has been changed
       };
       
       void PrettyMenu::changeBackground(std::istream& imgSrc) {
           lock(&mutext);     // acquire mutex
       
           delete bgImage;
           ++imageChanges;
           bgImage = new Image(imgSrc);
       
           unlock(&mutex);
       }
     #+end_src
   + 上面的例子违反了exception-safe function的两个基本要求 
     - Leak no resource: 如果上面的new Image代码抛出异常，那么unlock(&mutex)永远
       都不会得到执行，mutex这个resource就leak了
     - Don't allow data structures to become corrupted: 如果new Image抛出了异常
       那么bgImage将会指向deleted object, imageChanges也错误增加了(因为实际并没有增加
       新的background image 成功)
   + Leak resouce的问题可以通过利用resource-managing class来解决。data corrupted
     可以通过调整变量顺序，设置临时变量，或者shared_ptr来解决
     #+begin_src c++
       Image *temp = bgImage;
       bgImage = new Image(imgSrc);
       ++imageChanges;
       delete temp;
     #+end_src
   + exception-safe 提供三种层次的保证
     - basic guarantee : 如果异常被抛出，程序内部不会混乱，比如出现异常的话，background
       可以选择保留原来的背景，或者使用default的背景。
     - strong guarantee : 如果抛出异常，那就回到原来的状态，一点不受影响。
     - nothrow guarantee : 完全不抛出异常
   + copy and swap
     #+begin_src c++
       struct PMImpl {
           std::tr1::shared_ptr<Image> bgImage;
           int imageChanges;
       };
       
       class PrettyMenu {
       private:
           Mutex mutex;
           std::tr1::shared_ptr<PMImpl> pimpl;
       };
       
       void PrettyMenu::changeBackground(std::istream& imgSrc) {
           using std::swap;
           Lock ml(&mutex);
           //find a temp variable
           std::tr1::shared_ptr<PMImpl> pNew(new PMImpl(*pImpl));
           pNew->bgImage.reset(new Image(imgSrc));
           ++pNew->imageChanges;
       
           //copy and swap, exception-safe with basic guarantee
           swap(pImpl, pNew); 
       }
     #+end_src
** Item 30: Understand the ins and outs of inlining
   + Inline函数看起来像函数，动作像函数，比macro好很多，可以像function一样调用，又不用
     承担函数调用的代价
   + 但是inline的实现方法其实就是将"对这个函数的每一次调用"都以"inline函数本体"替换之，
     那么很可能增加object code的大小，object code变大可能会导致增加page，减小cache
     hit概率
   + function template 并不一定就是inline的。inline和function template通常都放到
     头文件，但是这样放置的原因是:大部分编译器都是在编译阶段进行inline和template的具现化
   + inline是对compier的一种request，而不是command，compiler自己决定是否真的对某个
     函数inline化
   + inline一个函数，除了显式的加上inline关键字以外，还可以把函数实现放到class definition
     里面
   + 以下情况不适合对函数进行inline:
     1) virtual function不适合inline，因为要到运行期才能决定使用哪个函数
     2) 太过复杂的函数不能成为inline，比如有循环或者递归
     3) 通过函数指针进行的调用不会被inline,因为inline 函数并不是真的函数，它没有地址，如
        果你对一个inline函数取地址，那么其实就是编译器又生成了一个outline的让你指
     4) ctor和dtor都不适合inline
     5) 一旦更改inline函数的实现，那么所有用到他的文件都要重新编译，如果你不想这么做，不要
        使用inline函数
     6) inline函数内部不能设置断点。
** Item 31: Minimize compilation dependencies between files.
   + 
