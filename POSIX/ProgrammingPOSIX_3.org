* Chapter 3: Synchronization
** Invariants, critical sections, and predicates
   + Invariant 这个词是指的一些不会改变的基础，程序的合理性，成功性都是建立在这
     上面的，比如，我们使用一个非空的双向链表，我们自然而然的认为某个结点的prev
     和next指针都是有实际意义的，指向有用内存地址的
   + 但是这种invariant是可以被破坏的，比如，我们向这个双向链表添加新结点的时候，
     这就要求我们在invariant被破坏的时候，保护我们的代码，防止这个时候有其他代码
     来使用我们不完整的数据结构，这种防范的机制，就叫critical section
** Mutexs
   + 大部分thread都要分享数据，为了不让一个thread更改invariant的时候，数据被其他
     thread访问，我们设计了一种锁，叫做Mutex
   + Mutex其实是mutually exclusive的缩写，就是说对一份数据的访问，只能多选一
   + 不只在数据修改的时候有左右，在多核情况下的数据读取中，mutex也有其重要的作用
*** Creating and destroying a mutex
    + 在POSIX里面mutex就是一个pthread_mutex_t类型的变量，我们可以如下两者方法创建:
      1) 静态申请:
        #+begin_src c
          #include <pthread.h>
          #include "errors.h"
          
          typedef struct my_struct_tag {
              pthread_mutex_t    mutex;   /* Protects access to value */
              int                value;   /* Access protected by mutex */
          } my_struct_t;
          
          my_struct_t data = {PTHREAD_MUTEX_INITIALIZER, 0};
          
          int main(int argc, char *agrv[])
          {
              return 0;
          }
        #+end_src
        - 静态申请的时候，要申请为全局变量(不在任何函数内部)
        - 如果想要其他文件访问，那么要给变量加关键字extern
        - 如果想要只在自己文件内部起作用，那么就是static作用域
        - 必须用PTHREAD_MUTEX_INITIALIZER初始化这个变量
      2) 动态申请 
        #+begin_src c
          typedef struct my_struct_tag {
              pthread_mutex_t     mutex;
              int                 value;
          } my_struct_t;
          
          int main(int argc, char *argv[])
          {
              my_struct_t  *data;
              int          status;
          
              data = malloc(sizeof(my_struct_t));
              if (data == NULL)
                  errno_abort("Allocate structure");
              status = pthread_mutex_init(&data->mutex, NULL);
              if (status != 0)
                  err_abort(status, "Init mutex");
              status = pthread_mutex_destroy(&data->mutex);
              if (status != 0)
                  err_abort(status, "Destroy mutex");
              (void)free(data);
              return status;
          }
        #+end_src
        - 很多时候，mutex所在的数据结构是动态申请下来的，这个时候，我们的mutex
          就不得不动态申请了。
        - 动态申请出来的数据结构里面的值是未定的，所以我们用pthread_mutex_init
          将mutex的部分设置为NULL
        - 动态申请的mutex不光要初始化，还要destroy,使用pthread_mutex_destroy
        - 如果你知道某个mutex不会有其他thread等待了，并且没有其他thread会试图去
          lock它，那么这个时候去destroy这个mutex就很安全了。
        - 比如在free某块数据之前，对它进行destroy，是很好的主意
*** Locking and unlocking a mutex
    + mutex 的使用相对简单，其实就是使用数据前，对数据进行上锁，然后离开数据前
      解锁，alarm_mutex.c就是这么一个例子
    + 首先是数据准备阶段
      #+begin_src c
        typedef struct alarm_tag {
            struct alarm_tag        *link;
            int                     seconds;
            time_t                  time;   /* seconds from EPOCH */
            char                    message[64];
        } alarm_t;
        
        pthread_mutex_t  alarm_mutex = PTHREAD_MUTEX_INITIALIZER;
        alarm_t *alarm_list = NULL;
      #+end_src
      - 新的数据结构里面增加了link指针，将所有的alarm_t都连接起来
      - second还是指的要休眠多少秒
      - time的产生，让程序更精确，程序创建的时候离EPOCH多少秒，加上sleep就是
        在离EPOCH多少秒的时候要结束睡眠。
      - 静态申请了alarm_mutex
      - 把alarm_list链表初始化并清空
    + 然后是thread function, 详细的操作其实是在这里面完成的
      #+begin_src c
        void *alarm_thread(void *arg)
        {
            alarm_t *alarm;
            int sleep_time;
            time_t now;
            int status;
        
            while (1) {
                /* lock the mutex !*/
                status = pthread_mutex_lock(&alarm_mutex);
                if (status != 0)
                    err_abort(status, "Lock mutex");
                alarm = alarm_list;
        
                if (alarm == NULL)
                    sleep_time = 1;
                else {
                    //head move for the next node
                    alarm_list = alarm->link;
                    now = time(NULL);
                    if (alarm->time <= now)
                        sleep_time = 0;
                    else 
                        sleep_time = alarm->time - now;
        #ifdef DEBUG
                    printf ("[waiting: %d(%d)\"%s\"]\n",alarm->time,
                            sleep_time, alarm->message);
        #endif
                }
                /*
                 *unlock the mutext bofore waiting
                 */
                status = pthread_mutex_unlock(&alarm_mutex);
                if (status != 0)
                    err_abort(status, "Unlock mutex");
                if (sleep_time >0)
                    sleep(sleep_time);
                else
                    sched_yield();
                
                if (alarm != NULL) {
                    printf("(%d) %s\n", alarm->seconds, alarm->message);
                    free(alarm);
                }
        
            }
        }
      #+end_src
      - thread function的主体是死循环，这也就意味着，只可能thread和main thread一
        块结束
      - 如果alarm_list链表上没有待处理的node，那就sleep 一秒，让main去接受用户
        输入，准备链表
      - 然后计算出真正需要睡的秒数，unlock掉mutex，开始睡眠
      - 如果需要睡的时间为0，那么调用sched_yield()来让main函数有机会运行
      - sleep后就可以打印结果了
    + main 函数
      #+begin_src c
        int main(int argc, const char *argv[])
        {
            int status;
            char line[128];
            alarm_t *alarm, **last, *next;
            pthread_t thread;
        
            status = pthread_create(&thread, NULL, alarm_thread,
                                    NULL);
            if (status != 0)
                err_abort(status, "Create alarm thread");
            while (1) {
                printf("alarm> ");
                if (fgets(line, sizeof(line), stdin) == NULL)
                    exit(0);
                if (strlen(line) <= 1) 
                    continue;
                alarm = (alarm_t*) malloc(sizeof(alarm_t));
                if (alarm == NULL)
                    errno_abort("Allocate alarm");
        
                if (sscanf(line, "%d %64[^\n]",
                           &alarm->seconds, alarm->message) < 2) {
                    fprintf(stderr, "Bad command\n");
                    free(alarm);
                } else {
                    status = pthread_mutex_lock(&alarm_mutex);
                    if (status != 0)
                        err_abort(status, "Lock mutex");
                    /* compute when should stop sleeping */
                    alarm->time = time(NULL) + alarm->seconds;
        
                    /*
                     *Insert the new alarm into the list of alarms,
                     *sorted by expiration time
                     */
                    last = &alarm_list;
                    next = *last;
                    while (next != NULL) {
                        if (next->time >= alarm->time) {
                            alarm->link = next;
                            *last = alarm;
                            break;
                        }
                        last = &next->link;
                        next = next->link;
                    }
                    if (next == NULL) {
                        *last = alarm;
                        alarm->link = NULL;
                    }
                    status = pthread_mutex_unlock(&alarm_mutex);
                    if (status != 0)
                        err_abort(status, "Unlock mutex");
                }
            }
        }
      #+end_src
      - main 函数主要是对数据的准备
      - 在数据之前，还是对mutex进行了lock，在离开前进行unlock
    + 我们的alarm_mutex.c 就讲解完了，这个版本的多线程，还是有很多问题的，比如
      thread在链表里面没有数据的时候，空空的sleep 一秒，这一秒什么都无法响应，我
      们要在后面的例子中，改进这个机制。
**** Nonblocking mutex locks
     + 通常来说，我们调用pthread_mutex_lock的话，如果mutex已经被占用的话，调用thread
       就会block，直到自己得到这个mutex。有的时候，我们不想让thread block住，发现
       mutex不可用的话，其实也可以去做点别的事情，这个时候，我们就可以使用另外的
       函数pthread_mutex_trylock, 如果mutex被占用，这个函数返回一个EBUSY, 而不是block
     + 我们来看看nonblocking mutex lock的应用
       #+begin_src c
         #include <pthread.h>
         #include "errors.h"
         
         #define SPIN 10000000
         
         pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
         long counter;
         time_t end_time;
         
         /*
          * Thread start routine that repeatedly locks a mutex and
          * increments a counter.
          */
         void *counter_thread (void *arg)
         {
             int status;
             int spin;
         
             /*
              * Until end_time, increment the counter each
              * second. Instead of just incrementing the counter, it
              * sleeps for another second with the mutex locked, to give
              * monitor_thread a reasonable chance of running.
              */
             while (time (NULL) < end_time)
             {
                 status = pthread_mutex_lock (&mutex);
                 if (status != 0)
                     err_abort (status, "Lock mutex");
                 for (spin = 0; spin < SPIN; spin++)
                     counter++;
                 status = pthread_mutex_unlock (&mutex);
                 if (status != 0)
                     err_abort (status, "Unlock mutex");
                 sleep (1);
             }
             printf ("Counter is %#lx\n", counter);
             return NULL;
         }
         
         /*
          * Thread start routine to "monitor" the counter. Every 3
          * seconds, try to lock the mutex and read the counter. If the
          * trylock fails, skip this cycle.
          */
         void *monitor_thread (void *arg)
         {
             int status;
             int misses = 0;
         
         
             /*
              * Loop until end_time, checking the counter every 3
              * seconds.
              */
             while (time (NULL) < end_time)
             {
                 sleep (3);
                 status = pthread_mutex_trylock (&mutex);
                 if (status != EBUSY)
                 {
                     if (status != 0)
                         err_abort (status, "Trylock mutex");
                     printf ("Counter is %ld\n", counter/SPIN);
                     status = pthread_mutex_unlock (&mutex);
                     if (status != 0)
                         err_abort (status, "Unlock mutex");
                 } else
                     misses++;           /* Count "misses" on the lock */
             }
             printf ("Monitor thread missed update %d times.\n", misses);                  
             return NULL;
         }
         
         int main (int argc, char *argv[])
         {
             int status;
             pthread_t counter_thread_id;
             pthread_t monitor_thread_id;
         
         #ifdef sun
             /*
              * On Solaris 2.5, threads are not timesliced. To ensure
              * that our threads can run concurrently, we need to
              * increase the concurrency level to 2.
              */
             DPRINTF (("Setting concurrency level to 2\n"));
             thr_setconcurrency (2);
         #endif
         
             end_time = time (NULL) + 60;        /* Run for 1 minute */
             status = pthread_create (
                 &counter_thread_id, NULL, counter_thread, NULL);
             if (status != 0)
                 err_abort (status, "Create counter thread");
         
             status = pthread_create (
                 &monitor_thread_id, NULL, monitor_thread, NULL);
             if (status != 0)
                 err_abort (status, "Create monitor thread");
         
             status = pthread_join (counter_thread_id, NULL);
             if (status != 0)
                 err_abort (status, "Join counter thread");
             status = pthread_join (monitor_thread_id, NULL);
             if (status != 0)
                 err_abort (status, "Join monitor thread");
             return 0;
         }
       #+end_src
       - counter_thread每1秒醒过来一次，锁住mutex，并且增加SPIN个counter
       - monitor_thread每3秒醒过来一次，试图去取锁mutex,成功的话，打印counter，失败的
         话，就再去等三秒
       - 在Solaris上，必须调用thr_setconcurrency才能让两个thread在单核机器上并发运行
*** Using mutexes for atomicity
    + 我们经常会降到原子性"atomic",意思就是说某个操作是不可分割的最小单位(比如一条
      汇编语句). 
    + 但实际的情况是，很多时候我们想要"原子性"的操作，远不是一条汇编能满足的，这个
      时候，与其费劲的琢磨编译器和硬件的不同，不如小心的使用mutex
    + 在多线程编程里面,"原子性", 不是说不可分割，而是说"线程看不到那些让他们费解的
      事情"
*** Sizing a mutex to fit the job
    + 我们所说的size a mutex，是指的mutex控制的区域，如果我们一个函数就是一个mutex的
      话，那肯定是thread-safe的，但也同时意味着和单线程无异了。通常来说mutex的大小
      有如下两个矛盾的指标:
      - mutex本身要lock和unlock，也是有代价的，所以尽可能少的lock，会提高效率
      - 一个mutex一次lock住太多资源的话，会令很多的thread等待，所以，尽可能的把大的
        mutex拆分成小的mutex，这样thread会减少等待时间，提高程序效率
    + 一开始，你会有一个大的mutex，随着工程的进行，你可以在不得已的情况下，依照自己
      的经验，将大的mutex拆分成几个小的mutex
*** Using more than one mutex
    + 很多时候，你会发现，你要同时mutex两个数据，mutex虽然看似仅仅是数量增加了，但是
      复杂度方面的增长更加大:比如，两个以上的mutex就会让你不得不考虑死锁的问题
**** Lock hierarchy
     + 我们来看一个经典的死锁例子，下图是两个thread调用mutex的顺序，我们说两者都不可能
       进行到第二步，因为都要获得对方已经lock的mutex
       | First thread                 | Scond thread                 |
       |------------------------------+------------------------------|
       | pthread_mutex_lock(&mutex_a) | pthread_mutex_lock(&mutex_b) |
       | pthread_mutex_lock(&mutex_b) | pthread_mutex_lock(&mutex_a) |
       |------------------------------+------------------------------|
     + 为了防止死锁的发生，我们发明了两种策略:
       - Fixed locking hierarchy: 说白了就是调用顺序要一致，比如我们都要先调用A, 然后调用B
         不能反过来
       - Try and back off: 说白了就是资源要么全部拥有，要么一个也不拥有。比如已经拥有一个
         mutex的情况下，pthread_mutex_trylock下一个mutex失败，那么就把原来的mutex也释放
     + 两种防止死锁的方法各有特点和现实情况下的限制，要相互合作
**** Lock chaining
     + 还有一种特殊的叫做chaining 的lock策略，所谓chaining，就是说先lock住一个mutex，然后lock
       第二个mutex，在lock第二个mutex的时候，第一个mutex就不需要了，可以释放掉
     + chaining lock最常见的，就是在遍历的数据结构中，比如树，我们可以先lock住root，然后等找
       到下一个子节点的时候，lock下一个子节点，同时释放对root的mutex。这样可以防止lock住整
       个树
** Condition variables
   + mutex的作用，是霸占住数据，然后对数据进行各种操作，有些情况下，我们是希望得
     到数据的变化，比如我们想等到队列里面有数据了，然后对队列数据进行操作，这个
     时候显然lock住数据的mutex是不对的，因为你lock住数据，数据是无论如何不会变化的
   + 为了能够让数据发生变化，必须首先unlock该数据的mutex，然后设置一个wait函数block
     住，等待后面使用这个数据的其他thread来通知。为了防止在unlock和wait之间发生其他
     thread 抢占mutex的情况，把unlock和wait做成一个原子操作的机制就叫做condition
     variable.
   + 每个condition variable都要依赖同一个mutex，一个mutex可以同时拥有好几个condition
     variable.
   + 我们前面说的，"某种数据的变化", 其实就是一种断言(predicate), 比如队列不为空，就
     是这样一个断言。一个condition variable最好只和一个predicate关联。虽然理论上可以
     和多个predicate关联，但实践经验告诉我们，还是联系一个比较安全
*** Creating and destroying a condition variable
    + condition variable和mutex一样，也分静态创建和动态创建，也不能复制，常见的两种
      创建方法如下
      #+begin_src c
        /* static creation */
        typedef struct my_struct_tag {
            pthread_mutex_t     mutex;
            pthread_cond_t      cond;
            int                 value;
        } my_struct_t;
        my_struct_t data = {
            PTHREAD_MUTEX_INITIALIZER, PTHREAD_COND_INITIALIZER, 0};
        
        /* dynamic creation */
        my_struct_t *data;
        int status;
        
        data = malloc (sizeof (my_struct_t));
        if (data == NULL)
            errno_abort ("Allocate structure");
        status = pthread_mutex_init (&data->mutex, NULL);
        if (status != 0)
            err_abort (status, "Init mutex");
        status = pthread_cond_init (&data->cond, NULL);
        if (status != 0)
            err_abort (status, "Init condition");
        status = pthread_cond_destroy (&data->cond);
        if (status != 0)
            err_abort (status, "Destroy condition");
        status = pthread_mutex_destroy (&data->mutex);
        if (status != 0)
            err_abort (status, "Destroy mutex");
        (void)free (data);
      #+end_src
*** Waiting on a condition variable
    + 我们前面说的，把unlock mutex和wait集合于一身的函数就是如下的wait condition
      variable函数
      #+begin_src c
        int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);
        int pthread_cond_timedwait(pthread_cond_t *cond,
                                   pthread_mutex_t *mutex,
                                   struct timespec *expiration);
      #+end_src
    + wait condition variable函数是unlock mutex，然后一直sleep，直到有人signal或者
      broadcast 这个condition variable, 这个时候wait condition函数返回，同时lock
      住这个mutex!, 也就是说，函数sleep的时候是一个unlock & sleep的原子操作，函数
      返回的时候，也是 lock & return的原子操作。
*** Waking condition variable waiters
    + 其他thread也要有责任在得到mutex并且更改了跟某个condition variable有关的数据
      的情况下，把这个事情broadcast给大众，或者signal给一个thread
      #+begin_src c
        int pthread_cond_signal(pthread_cond_t *cond);
        int pthread_cond_broadcast(pthread_cond_t *cond);
      #+end_src
    + broadcast和signal的区别就是broadcast是signal的一个超集，所以，如果不确定的情
      况下，就使用broadcast
    + 此处的signal和IPC中的信号不是一个概念，不要混淆
*** One final alarm program
    + 变量定义部分
      #+begin_src c
        #include <pthread.h>
        #include <time.h>
        #include "errors.h"
        
        /*
         * The "alarm" structure now contains the time_t (time since the
         * Epoch, in seconds) for each alarm, so that they can be
         * sorted. Storing the requested number of seconds would not be
         * enough, since the "alarm thread" cannot tell how long it has
         * been on the list.
         */
        typedef struct alarm_tag {
            struct alarm_tag    *link;
            int                 seconds;
            time_t              time;   /* seconds from EPOCH */
            char                message[64];
        } alarm_t;
        
        pthread_mutex_t alarm_mutex = PTHREAD_MUTEX_INITIALIZER;
        pthread_cond_t alarm_cond = PTHREAD_COND_INITIALIZER;
        alarm_t *alarm_list = NULL;
        time_t current_alarm = 0;
      #+end_src
    + 插入函数的设计，插入成功后signal这个condition variable
      #+begin_src c
        void alarm_insert (alarm_t *alarm)
        {
            int status;
            alarm_t **last, *next;
        
            /*
             * LOCKING PROTOCOL:
             * 
             * This routine requires that the caller have locked the
             * alarm_mutex!
             */
            last = &alarm_list;
            next = *last;
            while (next != NULL) {
                if (next->time >= alarm->time) {
                    alarm->link = next;
                    *last = alarm;
                    break;
                }
                last = &next->link;
                next = next->link;
            }
            /*
             * If we reached the end of the list, insert the new alarm
             * there.  ("next" is NULL, and "last" points to the link
             * field of the last item, or to the list header.)
             */
            if (next == NULL) {
                *last = alarm;
                alarm->link = NULL;
            }
        #ifdef DEBUG
            printf ("[list: ");
            for (next = alarm_list; next != NULL; next = next->link)
                printf ("%d(%d)[\"%s\"] ", next->time,
                    next->time - time (NULL), next->message);
            printf ("]\n");
        #endif
            /*
             * Wake the alarm thread if it is not busy (that is, if
             * current_alarm is 0, signifying that it's waiting for
             * work), or if the new alarm comes before the one on
             * which the alarm thread is waiting.
             */
            if (current_alarm == 0 || alarm->time < current_alarm) {
                current_alarm = alarm->time;
                status = pthread_cond_signal (&alarm_cond);
                if (status != 0)
                    err_abort (status, "Signal cond");
            }
        }
      #+end_src
    + thread function，用来wait 队列，在有数据的时候进行打印
      #+begin_src c
        void *alarm_thread (void *arg)
        {
            alarm_t *alarm;
            struct timespec cond_time;
            time_t now;
            int status, expired;
        
            /*
             * Loop forever, processing commands. The alarm thread will
             * be disintegrated when the process exits. Lock the mutex
             * at the start -- it will be unlocked during condition
             * waits, so the main thread can insert alarms.
             */
            status = pthread_mutex_lock (&alarm_mutex);
            if (status != 0)
                err_abort (status, "Lock mutex");
            while (1) {
                /*
                 * If the alarm list is empty, wait until an alarm is
                 * added. Setting current_alarm to 0 informs the insert
                 * routine that the thread is not busy.
                 */
                current_alarm = 0;
                while (alarm_list == NULL) {
                    status = pthread_cond_wait (&alarm_cond, &alarm_mutex);
                    if (status != 0)
                        err_abort (status, "Wait on cond");
                    }
                alarm = alarm_list;
                alarm_list = alarm->link;
                now = time (NULL);
                expired = 0;
                if (alarm->time > now) {
        #ifdef DEBUG
                    printf ("[waiting: %d(%d)\"%s\"]\n", alarm->time,
                        alarm->time - time (NULL), alarm->message);
        #endif
                    cond_time.tv_sec = alarm->time;
                    cond_time.tv_nsec = 0;
                    current_alarm = alarm->time;
                    while (current_alarm == alarm->time) {
                        status = pthread_cond_timedwait (
                            &alarm_cond, &alarm_mutex, &cond_time);
                        if (status == ETIMEDOUT) {
                            expired = 1;
                            break;
                        }
                        if (status != 0)
                            err_abort (status, "Cond timedwait");
                    }
                    if (!expired)
                        alarm_insert (alarm);
                } else
                    expired = 1;
                if (expired) {
                    printf ("(%d) %s\n", alarm->seconds, alarm->message);
                    free (alarm);
                }
            }
        }
      #+end_src
    + main函数，先调用thread，然后死循环等待输入，并插入到队列
      #+begin_src c
        int main (int argc, char *argv[])
        {
            int status;
            char line[128];
            alarm_t *alarm;
            pthread_t thread;
        
            status = pthread_create (
                &thread, NULL, alarm_thread, NULL);
            if (status != 0)
                err_abort (status, "Create alarm thread");
            while (1) {
                printf ("Alarm> ");
                if (fgets (line, sizeof (line), stdin) == NULL) exit (0);
                if (strlen (line) <= 1) continue;
                alarm = (alarm_t*)malloc (sizeof (alarm_t));
                if (alarm == NULL)
                    errno_abort ("Allocate alarm");
        
                /*
                 * Parse input line into seconds (%d) and a message
                 * (%64[^\n]), consisting of up to 64 characters
                 * separated from the seconds by whitespace.
                 */
                if (sscanf (line, "%d %64[^\n]", 
                    &alarm->seconds, alarm->message) < 2) {
                    fprintf (stderr, "Bad command\n");
                    free (alarm);
                } else {
                    status = pthread_mutex_lock (&alarm_mutex);
                    if (status != 0)
                        err_abort (status, "Lock mutex");
                    alarm->time = time (NULL) + alarm->seconds;
                    /*
                     * Insert the new alarm into the list of alarms,
                     * sorted by expiration time.
                     */
                    alarm_insert (alarm);
                    status = pthread_mutex_unlock (&alarm_mutex);
                    if (status != 0)
                        err_abort (status, "Unlock mutex");
                }
            }
        }
      #+end_src
** Memory visibility between threads
