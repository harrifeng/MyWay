* Chapter 1: Introducing Jquery
** Power in the econmy of code
   + 经过对比发现，使用jquery可以节省很多代码。jquery会把所有的javascript实现都
     放到头部去
** Unobstrusive JavaScript
   + 谦逊的Javascript的意思就是在html文件的头部定义1style和2behavior的信息，而
     在体部分定义HTML structural elements
** JQuery fundamentals
*** The jquery wrapper
    + 当css被引入web领域的时候，急需一个能表示某一个特定群体的方法，这个方法如下:
      #+begin_example
      p a
      #+end_example
    + 这段代码的意思就是所有在<p> element中被嵌套的<a> element
    + 比如我们想在jquery中引用所有p中的啊
      #+begin_src html
        $("p" "a")
      #+end_src
    + $() 这个function 返回一个特殊的javascript object，˙其中包括一个DOM element
      的数组，这就叫做wrapper function
    + 比如我们要让所有的div中是要你管notLongForThisWorld的element都被hide，那么我
      们可以使用如下代码
      #+begin_src html
        $("div.notLongForThisWorld").hide()；
      #+end_src 
    + 所有的这些wrapper function都是可以连续调用的，因为返回值还是这个element数组
      #+begin_src html
        $("div.notLongForThisWorld").hide().addClass("removed");
      #+end_src
    + 下面这两种代码是一回事，因为我们使用了ID(而不是某一类的选择子),所以数组其
      实只有一个元素
      #+begin_src html
        $("#someElement").html("I have added some text to an element");
        $("#someElement")[0].innerHTML = "I have added some text to an element";
      #+end_src
    + 如果你不是用ID,而是要选择某一类符合条件的元素，那么可以使用下面两种方法(第
      二种不被推荐)
      #+begin_src html
        $("div.fillMeIn").html("I have added some text to a group of nodes");
        
        var elements = $("div.fillMenIn");
        for (var i = 0; i < elements.length; i++)
            elements[i].innerHTML = "I have added some text to a group of nodes";
      #+end_src
    + 当然了，我们的jquery在"挑选某一类"元素方面，有更多的武器:
      | Selector               | Results                             |
      |------------------------+-------------------------------------|
      | $("p:even")            | Selects all even <p> elements       |
      | $("tr:nth-child(1)")   | Selects the first row of each table |
      | $("a[href$= 'pdf']")   | Selects links to PDF file           |
      | $("body > div:has(a)") | Selects direct <div> children of    |
      |                        | body containing a                   |
    + 除了wrapper function以外，我们还有些函数是起辅助作用的(其实是function的
      methonds),比如下面的trim函数，这个去掉前后空格的函数经常被使用
      #+begin_src html
        var trimmed = $.trim(someString);
        
        var trimmed= jQuery.trim(someString);
      #+end_src
*** The document ready handler
    + 我们所有的javascript行为都是和网页体系分开的，所以我们的行为要等到所有的元
      素都加载完之后，才能进行。一般来说，我们会使用如下方法
      #+begin_src js
        window.onload = function() {
            // do stuff here
        }
      #+end_src
    + 上面方法的缺点是浏览器要加载完所有的元素之后才能进行我们的js函数，这不会有
      好的用户体验，好的办法就是等浏览器建好DOM tree之后就下手，jquery为我提供了
      这种跨浏览器的方法实现
      #+begin_src js
        jQuery(document).ready(function() {
            $("div.notLongForThisWorld").hide();
        });
      #+end_src
*** Making DOM elements
    + 如果我们需要创建新的DOM element，那么我们可以给$()函数传一段HTML代码，比如
      #+begin_src js
        $("<p> Hi here </p>")      
      #+end_src
*** Extending jQuery
    + 所有的库，都不可能实现所有的API,用户如果想要加入自己的API到Jquery中，那么
      就要使用如下的方法
      #+begin_src js
        $.fn.disable = function() {
            return this.each(function() {
                if (this.disabled == null)
                    this.disable = true;
            });
        }
      #+end_src
    + 其中$.fn.disable就是说，"我们正在扩展jquery"
    + this就是代表这个函数将要打开的所有的DOM元素
    + each()函数，就是对所有的这些元素进行操作
* Chapter 2: Selecting the elements upon which to act
  + 我们前面讲过，如何选择某一个特定的DOM element以及如何确定要调用哪个函数来处
    理特定的DOM 元素
  + 这一章，我们主要讲解如何利用selector来选择DOM元素已经如何创建DOM元素
** Selecting elements for mainipulation
   + 前一章讲到了wrapper function，要使用wrapper function，我们必须要知道是作用
     在哪些的元素上面，有些时候，这些元素非常好描述，比如, "这个页面上面所有的元
     素", 但是有些时候，对元素的描述则复杂的多，比如"所有的包含listElement类的成
     员，里面要包含链接，而且要在list的第一位"
*** Controlling the context
    + 我们可以通过给$()函数一个optional的参数的方式来限定我们的DOM选择的范围，比
      如，在我们的例子中就是如下的方法来限定我们高亮的区域都是控制在ID为
      sampleDOM的区域中的(在这个例子中sampleDOM是一个DIV区域)
      #+begin_src js
        var selector = $.trm($('#selectorField').val());
        var wrappedSet = $(selector, '#sampleDOM');
      #+end_src
*** Using basic CSS selector
    + 我们的jquery也是复合css3标准的，所以以下selector的写法都是可行的
      | Example                   | Description                                         |
      | a                         | Matches all anchor (<a>) elements                   |
      | #specialID                | Matches the elements with the id value of specialID |
      | .specialClass             | Matches the elements with the class specialClass    |
      | a#specialID.specialClasss | Matches the elements with the id value specialID    |
      |                           | if it's an anchor tag and has class specialClass    |
      | p a.specialClass          | Matches al anchor elements with the class           |
      |                           | specialClass that are descendants of <p> elements   |
      |---------------------------+-----------------------------------------------------|
*** Using child, container, and attribute selectors
    + 刚才我们说到的，是css里面所使用的最简单的selector，主要通过id，名字等基本
      信息，在IE7以后已经其他主流浏览器中，我们还可以使用元素之间的继承关系，容
      器，属性等等来进行"精确定位"
    + 比如如下例子中，如果我们想要得到 Query support的话,我们就不能再使用简单的
      "ul.myList li a"了,因为这样的话,会包括css1,css2,css3,这个时候,我们就要使用
      child selector "ul.myList > li > a"
      #+begin_src html
        <ul class="myList">
            <li><a href="http://jquery.com">jQuery support</a>
             <ul>
               <li><a href="css1">css1</a></li>
               <li><a href="css2">css2</a></li>
               <li><a href="css3">css3</a></li>
               <li>Basic</li>
             </ul>
            </li>
        </ul>
      #+end_src
    + 还是上面那个例子,如果ul.myList下面有多个li,a的情况下,我想精确的定准是打击
      某一个item,那么,我们这里有一个强有力的武器:attribute selector, 类似于正则
      表达式的方法,让控制更加细致
      #+begin_src js
        ul.myList > li > a[href^='http://']      
      #+end_src
    + 这种tag+[]+正则表达式的方法,生发开来,有如下几种应用:
      #+begin_src js
        form[method]
        div[title^='my']
        a[href$='.pdf']
        a[href*='jquery.com']
      #+end_src
    + 最后就是我们可以通过具体位置的信息来筛选元素,比如,我们想要每个页面第一个a,
      最后一个li, 奇数个div,等等
      #+begin_src js
        a:first
        p:odd
        p:even
        ul li:last-child
      #+end_src
    + 常见的情况如下:
      | Selector      | Description                                        |
      |---------------+----------------------------------------------------|
      | :first        | Matches the first match within the context         |
      | :last         | Matches the last match within the context          |
      | :first-child  | Matches the first child element within the context |
      | :last-child   | Matches the last child element within the context  |
      | :only-child   | Returns all elements that have no siblings         |
      | :nth-child(n) | Matches the nth element within the context         |
      | :gt(n)        | Matches matching elements after and excluding the  |
      |               | nth matching element                               |
      | :lt(n)        | Matches matching elements before and excluding the |
      |               | nth matching element                               |
*** Using CSS and custom JQuery filtr selectors
    + 除了上面各种方法以外,我们还可以使用filter selector来处理一些难度比较大的定
      位.
    + 比如,我们想定位当前所有被check的checkbox,我们不能简单的检查checked这个状态,因
      为这个是初始状态,所以我们要使用input:checked这个selector来确定即时状态:
      | Selector        | Description                                             |
      | :animated       | Selects only elements that are currently under animated |
      |                 | control.                                                |
      | :button         | Selects only button elements                            |
      | :checkbox       | Selects only checkbox elements                          |
      | :checked        | Selects only checkboxes or radio elements in checked    |
      |                 | state                                                   |
      | :contains(food) | Selects only elements containing the text food          |
      | :disabled       | Selects only elements in disabled state                 |
      | :enabled        | Selects only elements in enabled state                  |
      | :file           | Selects only file input elements                        |
      | :has(selector)  | Selects only elements that contain at least one element |
      |                 | that mtches the specified selector                      |
      | :header         | Selects only elements that are headers                  |
      | :hidden         | Selects only elements that are hidden                   |
      | :image          | Selects only image input elements                       |
      | :input          | Selects only form elements(input, select, textarea,     |
      |                 | button)                                                 |
      | :not(selector)  | Negates the specified selector                          |
      | :parent         | Selects only elemsnts that ahave children               |
      | :rdio           | Selects only radio elements                             |
      | :reset          | Selects only reset buttons                              |
      | :selected       | Selects only <option> elements that are in selected     |
      |                 | state                                                   |
      | :submit         | Selects only submit button                              |
      | :text           | Selects only text elements                              |
      | :visable        | Selects only elements that are visable.                 |
** Genarating new HTML
   + 有很多时候,我们想要插入某些html元素到当前的html文件中来,这个时候,可以采用如
     的方法:
     #+begin_src js
       $(function() {
           $('<img>',
             {
                 src: 'mages/little.bear.png',
                 alt: 'Little Bear',
                 title: 'I woof in your general direction',
                 click: function() {
                     alter($(this).attr('title'));
                 }
             })
               .css ({
                   cursor: 'pointer',
                   border: '1px solid black',
                   padding: '12px 12px 20px 12px',
                   backgroundColor: 'white'
               })
               .appendTo('body');
       });
     #+end_src
   + 这里的"click: function"就是所谓的handler,我们后面会介绍,其实也就是处理用户
     的鼠标点击事件
    
** Managing the wrapped element set
   + 我们前面也说过了如何选择一些有共同特点的元素,以及我们自己插入某些元素到html
     里面,无论如何,我们以及能够得到一个数组的元素了,下面来讲如何对这些元素进行处理
     以期改变它们的状态
*** Determing the size of a wrapped set
    + 我们可以通过size函数来确定"有某些共同特点的元素集合"的大小
      #+begin_src js
        $('#someDiv')
            .html('There are ' + $('a').size() + 'link(s) on this
            page.');
      #+end_src
*** Obtaining elements from a wrapped set
    + 从这个元素集合中取出某些成员的方法有如下几种:
      1) 通过索引取出成员
         #+begin_src js
           var imgElement = $('img[alt]')[0]
           var imgElement = $('img[alt]').get(0)
         #+end_src 
      2) 不想取出元素,而是取出带$()的元素集合,好进行连续操作
         #+begin_src js
           $($('p').get(23))
           $('p').eq(23)
         #+end_src 
      3) 取得最开始和最后的元素
         #+begin_src js
           $('p').first()
           $('p').last()
         #+end_src 
      4) 返回一个数组
         #+begin_src js
           // all the <button> elements on the page
           // before a <label> elements
           var allLabeledButtons = $('label+button').toArray();
         #+end_src
      5) 查找元素所在的位置
         #+begin_src js
           // we want to know ordinal index of image with id of findMe
           var n = $('img').index($('img#findMe')[0]);
           // it's located by id, so the [0] can be omitted
           var n = $('img').index('img#findMe');
         #+end_src 
*** Slicing and dicing a wrapped element set
    + 得到元素集合以后,照样还是要对这个集合进行更改:
      1) 增加一些成员:
         #+begin_src js
           $('img[alt]').add('img[title]')
         #+end_src
      2) 减去一些成员,这个名字取成了not,而不是delete,not传入的参数是某一类元素
         集合,比如,下面例子中not被传入的是"没有keepMe的类"的集合:
         #+begin_src js
           $('img').not(function() {return !$(this).
           hasClass('keepMe');})
         #+end_src
      3) 过滤某些元素,我们看到not是当function为true的情况下进行过滤,而filter是当
         function为false的情况下进行过滤.简单点说,就是filter是得到符合(exp)的结
         果,而not是去掉符合(exp)的结果,比如下面例子中,就是我们要得到,某些img里面
         title中有dog的元素
         #+begin_src js
           $('img')
               .addClass('seeThrough')
               .filter('[title*=dog]')
               .addClass('thickBorder')
         #+end_src
      4) 我们还可以取"数组的一部分"
         #+begin_src js
           $('*').slice(2,3)         
         #+end_src
      5) 还可以从元素继承的角度来取得某些元素,比如下面就是div中包含至少一个img元素,
         而且这个img元素拥有alt属性
         #+begin_src js
           $('div').has('img[alt]')         
         #+end_src
      6) 为某个集合里面所有的成员调用callback函数,并且把返回值组成一个函数返回.
         #+begin_src js
           var allIds=$('div').map(function() {
               return (this.id==undefined) ? null : this.id;
           }).get();
         #+end_src
      7) 为某个集合所有成员进行某种操作还有更方便的方法,就是each,但是each不像map
         一样收集返回值
         #+begin_src js
           $('img').each(function(n) {
               this.alt='This is image['+n+'] with an id of '+this.id;
           });
         #+end_src
*** Getting wrapped sets using relationships
    + 通过相互间的继承关系,我们可以有更多的方法来获取某些元素,这种函数很多,我就举如下
      两个简单的例子
      #+begin_src js
        //find the <div> block within which the button is defined
        //this refer this button
        $(this).closest('div.myButtonContainer')
        //find a sibling button with a particular title attribute:
        $(this).siblings('button[title="Close"]')
      #+end_src
*** Even more ways to use a wrapped set
    + 我们可以从当前的元素集合中找出满足某些继承关系的子集:
      #+begin_src js
        wrappedSet.find('p cite')      
      #+end_src
    + 还可以判断当前元素集合中是否存在某种元素
      #+begin_src js
        // This statements sets the value of the hasImage
        // variable to true if the current DOM has an imag
        // element
        var hasImage = $('*').is('img')
      #+end_src
*** Manage Jquery chains
    + 我们知道jquery的函数返回的,往往还是一个元素几何,然后可以链式调用
      但是,有时候我们会通过各种方法去掉一些元素,后来又想恢复去掉的函数
      这个时候就要用到end函数
      #+begin_src js
        // The filter() method returns the set of titled imags,
        // but by calling end() we back up to the previous
        // wrapped set
        $('img').filter('[title]').hide().end().addClass('anImage');      
      #+end_src
    + 还可以把相邻的两个元素集合合并起来,利用andSelf()函数,比如下面的例子就是把
      所以div先赋予一个class,然后取出其中的b赋予另外一个class,把两个元素集合合
      并起来赋予第三个class
      #+begin_src js
        $('div')
            .addClass('a')
            .find('img')
            .addClass('b')
            .andSelf()
            .addClass('c');
      #+end_src
         
            
* Chapter 3: Bringing pages to life with jQuery
** Working with element properties and attributes
   + 对于DOM元素来说,我们要改变的其实是两种基本组成部分,一种叫properties, 另外一
     个叫做attributes,他俩的区别如下:
     - property 是Javascript里面的概念,每一个property都有name和value, Javascript
       灵活的特性,让我们可以轻松的创建各种property
     - attribute不是Javascript的概念,而是一个DOM的概念, 它也有自己的name和value
   + 下面的例子中tag是img, 而id, src, alt, class title都是这个元素的attribute
     #+begin_src html
       <img id="myImage" src="image.gif" alt="An image" class="someClass"
            title="This is an image"/>     
     #+end_src
   + 我们可以看到浏览器是依靠attribute来生成了一个nodelist,从而显示页面的.而
     Javascript内部则是用的property, 被限定在某个element里面
*** Manipulating element properties
    + 我们先看看如何找到元素中的property,这其实就是我们前两章讲的内容,一旦我们能
      够定位某些元素,那么jquery就会以数组的形式返回给我们,我们取就可以了,比如:
      - $(whatever)[n]
      - get()
      - each(), map()
      - eq()
      - filter()
    + 比如下面的例子就是把DOM中每个元素的id 这个 property设置为 tagName 和 序列n
      的和
      #+begin_src js
        $('*').each(function(n) {
            this.id = this.tagName + n;
        }
      #+end_src
*** Fetching attribute value
    + 获取attribute的方法是attr()这个函数.
    + 而且我们的attr()还可以返回用户自己设置的参数,比如下面的例子,attr还可以返回
      data-custom 这个attribute
      #+begin_src html
        <img id="myImage" src="image.gif" alt="An image" class="someClass"
             title="This is an image" data-custom="some value"/>
        $("#myImage").attr("data-custom")
      #+end_src
    + 注意,在html5中,所有自定义的attribute都必须以data-开头
    + 说了这么多,我们发现attribute好像比起property来麻烦很多啊,那为啥还要访问
      attribute啊,这是因为因为历史原因,每个浏览器的attribute都不一样,而jquery为
      了能够跨平台,为他们规范了一个统一的名字,比如
      | Jquery normalized name | DOM name                               |
      | cssFloat               | styleFloat for IE, cssFloat for others |
      | cellspacing            | cellSpacing                            |
      | class                  | className                              |
*** Setting attribute values
    + 设置attribute也是有两种方法,都是用attr()函数,只不过参数不同:
      1) attr(name, value): 除了常规设置,value还可以是一个function,而这个
         function带两个参数, 一个参数是数组的index(因为我调用者总是元素集合),另
         外一个就是当前的value,返回值作为新的value赋予当前的attribute
         #+begin_src js
           $('*').attr('title', function(index, previousValue) {
               return previousValue + 'I am element ' + index +
                      'and my name is' + (this.id || 'unset');
           }
         #+end_src
      2) attr(attributes): 就是直接把一个object付给attr函数,类似拷贝构造函数
         #+begin_src js
           $('input').attr (
               {value: '', title: 'Please enter a value'}
           );
         #+end_src
    + 需要注意的是IE不允许更改input 元素的内容  
 
      
