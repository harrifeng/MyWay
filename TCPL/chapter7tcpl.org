*  Chapter 7 Functions
** Function Declarations
   + 任何function在使用以前都必须进行声明
   + function的声明可以有参数变量，但是编译器不会去看的
*** Function Definitions
    + 程序在使用之前必须要定义，但是很多时候，我们会发现有些参数没有用到，这通常是为了以后的升级扩展
       #+begin_src c++
         void search(tabe*t, const char* key, const char*)
         {
             // no use of the third argument
         }
       #+end_src
    + 函数可以被定义为inline的，便于编译器进行优化。
    + inline关键字不影响semantics of a functio.一个inline function一样拥有unique address
*** Static Variables
    + 一般的变量都是在程序到达的时候进行一次初始化，一个function里面如果有普通变量的话，每次调用这个function
       变量就会初始化一次，然后随即函数退栈，变量销毁
    + static 变量就不一样了，因为他存储的地方就是再静态区，第一次调用function的时候，static变量初始化，function退栈
       也不会影响到static变量
** Argument Passing
   + 函数传递就分成了值传递和引用传递，也就是call-by-value, call-by-reference.一般来说call-by-reference直接调用是_有可能_
      改变参数值的，所以如果不想改变就加const引用，如果要改变，要加注释
       #+begin_src c++ 
         void f(const Large& arg)
         {
             // the value of "arg" cannot be changed without explict use of type conversion
         }
         
         void g(Large& arg); // assume that g() modifies arg
       #+end_src
   +  在传参过程当中有type conversion在const T&这种形式中是允许的，而反之则不允许。这种情况我们见到很多次了，其中
       原因大体讲即是const可以保证参数不变，即便引入temp variable也不会有问题。
       #+begin_src c++
         float fsqrt(const float&); // Fortran-style sqrt taking a reference argument
         
         void g(double d)
         {
             float r = fsqrt(2.0f) ;          //pass ref to temp holding 2.0f
             r = fsqrt(r);                      // pass ref to r
             r = fsqrt(d);                      // pass ref to temp holding float(d)
         }
         
         void update(float& i);
         
         void g(double d, float r)
         {
             update(2.0f);            //error:const argument
             update(r);                //pass ref to r
             update(d);               //error: type conversion required
         }
       #+end_src
*** Array Arguments
    + 如果数组作为函数参数的话， a pionter to its initial element被传递。因为传递的是T*的形式，也就意味着数组成员可以被
       改变。
    + 数组的大小一般是多加一个参数来传递的。而字符数组因为是0结尾，可以不传。
    + 我们前面说过，多维数组很容易出问题，但是通常情况下如果需要用的话，我们可以用arragy of pointer来替代比如
       #+begin_src c++
         char* day[] = {"mon", "tue", "wed", "thu", "fri", "sta", "sun"};
       #+end_src
** Value Return
   + 一切非void的函数都要有返回值，而且返回值也是all standard and user-defined type conversions are performed.
   + 我们知道，一旦函数返回，栈退出，里面的automatic的内存就会被收回了，所以返回pointer to a local variable的情况是被
      禁止的
   + void类型虽然不能返回value，但是可以返回void
      #+begin_src c++
        void g(int* p);
        void h(int* p) { /* .... */ return g(p); }  // ok: return of "no value"
      #+end_src
** Overloaded Function Names
   + Using the same name for operations on different types is called overloading.
   + 区分两个函数的方法主要是看参数的不同了。在参数转换的时候，safe promotion比unsafe conversion更受欢迎
*** Overloading and Return Type
    + Return Type没有作为区别两个函数的参数，所以返回值不同的同名函数不能重载
*** Overloading and Scopes
    + 在不同namespace的同名函数，也 不可能进行重载
*** Manual Ambiguity Resolution
    + overload过多或者过少的函数，都是不正确的
*** Resolution for Multiple Arguments
    + 正确使用overload会使得代码简洁
** Default Arguments
   + 一般来说，函数调用的时候，有时候不需要那么多信息，我们可以把某些参数做成default的
      #+begin_src c++
        void print(int value, int base = 10);        //default base is 10
        void f()
        {
            print(31);
            print(31, 10);
            print(31, 16);
            print(31, 2);
        }
        //might produce this output: 31, 31, 1f, 11111
      #+end_src
** Unspecified Number of Arguments
   + 为了兼容c语言的不定参数列表，c++也要支持，这种不定参数的书写很麻烦
      #+begin_src c++
        #include <iostream>
        #include <cstdarg>
        using namespace std;
        
        void errorFhr(int severity ...)
        {
            va_list ap;
            va_start(ap, severity);    /*arg startup*/
        
            for (;;) {
                char* p = va_arg(ap, char*);
                if (p == 0) break;
                cout << p << ' ';
            }
            va_end(ap);
            
        }
        
        const char* Null_cp = 0;
        int main(int argc, char const* argv[])
        {
            errorFhr(0, "hello world", Null_cp);
            return 0;
        }
      #+end_src
** Pointer to Function
   + 对一个函数来说，除了调用他以外，我们能做的就是取他的地址了
      #+begin_src c++
        void error(string s) { /*..... */}
        
        void (*efct)(string);             // pointer to function
        
        void f()
        {
            efct = &error;            //efct points to error
            efct("error");             // call error throught efct
        }
      #+end_src
   + 指向函数的指针要求参数和返回值都一样，这样难免麻烦，所以我们会使用一些typedef来简化
   + array of pointers to function是非常有用的
      #+begin_src c++
        typedef void (*PF) ();
        
        PF edit_ops[] = {          //edit operations
            &cut, &paste, &copy, &search
        };
      #+end_src
** Macros
   + 对Macros来说，就一句话，能不用，就不用。特别Cpp中有const的话，用macros更不合适
*** Conditional Compilation
    + 有一种情况macros的使用不可避免比如
      #+begin_src c++
        int f(int a
              #ifdef arg_two
              , int b
              #endif
            );
      #+end_src
    + #ifdef定义的macros要精心选择 ，尽量避免和常规的identifier冲突。 arg_two就很容易冲突
