*  Chapter 10: Classes
** Introduction
   + A class is a user-defined type.
** Classes
*** Member Functions
    + Functions declared within a class definition are called member functions
*** Access Control
    + A struct is simply a class whose members are public by default
*** Constructors
    + Ctors boey the same overloading rules as do other functions. As long as the ctor
      differ sufficiently in their argument types, the compiler can select the correct
      one for each use.
    + 一种减少无谓ctor的方法就是default argument
      #+begin_src c++
        class Date {
            int d, m, y;
        public:
            Date (int dd = 0; int mm = 0; int yy = 0);
            //...
        };
      #+end_src
*** Static Members
    + static member是一种 part of a class, yet is not part of an object of that class.
    + There is exactly one copy of a static member instead of one copy per object.因为static变量
      是存在静态区的
    + Similary, a function that needs access to members of a class, yet does not need to be invoked
      for a particular object, is called a static member function.
    + 正因为static的部分是class的，而不是object的，所以他们可以直接用class名调用，而且必须在ctor
      以外的其他地方进行定义
      #+begin_src c++
        class Date{
            int d, m, y;
            static Date default_value;
        public:
            Date(int dd = 0, int mm = 0, int yy = 0);
            //...
            static void set_default(int, int, int);
        };
        
        Date::Date(int dd, int mm, int yy)
        {
            d = dd ? dd : default_value.d;
            m = mm ? mm : default_value.m;
            y = yy ? yy : default_value.y;
        
            //check that the Date is valid
        }
        
        Date Date::default_value(16, 12, 1770);
        
        void Date::set_default(int d, int m, int y)
        {
            Date::default_value = Date(d, m, y);
        }
        
        //Static Member Function can be used without object
        void f()
        {
            Date::set_default(4, 5, 1945);
        }
        
      #+end_src
*** Copying Class Objects
    + 对Object的拷贝有两种形式，第一就是所谓的initialized copy.这种copy是copy of each member. 如果copy of each
      member不是用户所想要的结果，那么要自己提供一个copy ctor
      #+begin_src c++
        Date d = today; //initialization by copy
      #+end_src
    + 另一种拷贝就是assignment copy. 也是 copy of each member.
      #+begin_src c++
        void f(Date& d)
        {
            d = today;
        }
      #+end_src
*** Constant Member Function
    + 所谓const member function就是说此函数声明，他不会更改class的state
      #+begin_src c++
        inline int Date::year() const
        {
            return y++; //error: attempt to change member value in const function
        }
      #+end_src
    + 如果一个const member function在class外定义，那么const suffix是必须的
    + 一个const的member function可以被 const或者非const的object对象调用
    + 一个non-const的member function则只可以被non-const object调用 （很好理解const object必须保证，啥改变class
      的事情都不能做嘛)
*** Self-Reference
    + 有些没有返回值的函数，比如add_year(), add_month(), add_day(),我们可以把他们的返回值设计成 return a
      reference to the updated object.这样一来，很多操作就可以chained.
      #+begin_src c++
        void f(Date& d)
        {
            //...
            d.add_day(1).add_month(1).add_year(1);
            //...
        }
        
        Date& Date::add_year(int n)
        {
            if (d == 29 && m == 2 && !leapyear(y+n)) {
                d = 1;
                m = 3;
            }
            y += n;
            retrun *this;
        }
      #+end_src
**** Physical and Logical Constness
     + 有时候一个member function是logical const的，但是他还是会在用户无法察觉的地方更改了一些地方，这种情况叫做
       logical constness
       #+begin_src c++
         class Date {
             bool cache_valid;
             string cache;
             void compute_cache_value(); //file cache
             //...
         public:
             string string_rep() const; //string representation
         };
         
         string Date::string_rep() const
         {
             if (cache_valid == false) {
                 //从这里我们也可以看到所谓const member function 无法
                 //更改member，其原理就是这个function的参数是 const this
                 Date* th = const_cast<Date*> (this);  //cast away const
                 th->compute_cache_value();
                 th->cache_valid = true;
             }
             return cache;
         }
         
         Date d1;
         const Date d2;
         
         string s1 = d1.string_rep();
         string s2 = d2.string_rep();  //undefined behavior
       #+end_src
       
**** Mutable
     + 解决这个问题的办法，就是storage specifier mutable.这个关键字的意思就是“被修饰的变量，永远都不可能为
       const”
       #+begin_src c++
         class Date {
             mutable bool cache_valid;
             mutable string cache;
             void compute_cache_value() const; //fill (mutable) cache
         public:
             //...
             string string_rep() const;        //string representation
         };
         
         string Date::string_rep() const
         {
             if (!cache_valid) {
                 compute_cache_value();
                 cache_valid = true;
             }
         
             return cache;
         }
         
         Date d3;
         const Date d4;
         string s3 = d3.string_rep();
         string s4 = d4.string_rep();   //ok!
       #+end_src
*** Structures and Classes
    + structure 就是一个 全部为public 的class
    + private和public可以多次使用，但是最好不要，看起来很奇怪
*** In-Class Function Definitions
    + 如果一个function是defined within the class definition的话，它会被编译成inline的。也就是说，最好那种短小精悍
      经常被使用的函数才defined inside class
    + 前面说过，先写函数，再写变量是很好的格式，但是如果函数上来就在函数体部分暴露了private数据，没看到后面数据
      的用户会很迷惑。所以我们可以显式的声明inline函数
    #+begin_src c++
      class Date {
      public:
          int day() const;
          //....
      private:
          int d, m, y;
      };
      inline int Date::day() const {return d;}
    #+end_src
** Efficient User-Defined Types
   + 总之就是告诉你，他设计的c++有多么的好，要用他的那一套类实现的方式
     #+begin_src c++
       class Date {
       public:
           enum Moth {jan =1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec};
       
           class Bad_date{}; //exception class
       
           Date(int dd = 0; Month mm = Month(0), int yy = 0);
       
           //functions for examining the Date:
           int day() const;
           Month month() const;
           int year() const;
           string string_rep() const;
           void char_rep(char s[]) const;
       
           static void set_default(int, Month, int);
       
           //functions for changing the Date:
           Date& add_year(int n);      // add n years
           Date& add_month(int n);     // add n months
           Date& add_day(int n);       // add n days
       private:
           int d, m, y;
           static Date default_date;
       };
     #+end_src
*** Member Functions
    + 一般来说, implementation for each member function必须在其他地方实现
      #+begin_src c++
        Date::Date(int dd, Month mm, int yy)
        {
            if (yy == 0) yy = default_date.year();
            if (mm == 0) mm = default_date.month();
            if (dd == 0) dd = default_date.day();
        
            int max;
        
            switch (mm) {
            case feb:
                max = 28 + leapyear(yy);
                break;
            case apr:case jun:case sep: case nov:
                max = 30;
                break;
            case jan:case mar:case may:case jul:case aug:case oct:case dec:
                max = 31;jbreak;
            default:
                throw Bad_date(); // someone cheated
            }
            if (dd < 1|| max < dd) throw Bad_date();
        
            y = yy;
            m = mm;
            d = dd;
        }
      #+end_src
    + ctor看起来很麻烦，但是ctor的设置给class了一种invariant,也就是说Date一旦建立，就不需要
      further check了。
    + 比起创建那种data validation function, 我更倾向于exception
      #+begin_src c++
        void fill(vector<Date>& aa)
        {
            while (cin) {
                Date d;
                try {
                    cin >> d;
                }
        
                catch (Date::Bad_date) {
                    //my error handling
                    continue;
                }
                aa.push_back(d);
            }
        }
      #+end_src
*** Helper Function
    + 通常来说，类还有很多的帮助function，不属于这个类的。但是类却要时常用到。怎么办呢，如何把这种
      helper function和类联系起来呢？答案就是namespace
      #+begin_src c++
        namespace Chrono { //facilities for dealing with time
            class Date {/* ... */};
            int diff(Date a, Date b);
            bool leapyear(int y);
            Date next_weekday(Date d);
            Date next_saturday(Date d);
            //...
        }
      #+end_src
*** Overloaded Operators
    + 重载某些操作符在某些入complex number, vector类里面，几乎是必须的
*** The significance of Concrete Classes
    + 我们把上面的这种simple user-defined type叫做concrete type， 以来区别 abstract class 和 class hierachies
    + concrete type的使用很不一样，它几乎和int一样，是当做一个type来使用的，因为结构简单，大小在编译期间
      已知， layout of each object也已知。
** Objects
*** Destructors
    + 我们前面讲到过ctor，对应的，对象在离开scope的时候，需要调用dtor来释放资源。
*** Default Constructors
    + 所谓default ctor就是不需要提供参数的ctor
    + 如果用户没有提供default ctor，编译器会自己提供一个。A compiler-generated default ctor implicityl calls
      the default ctor for a class's member of clas type and bases.
      #+begin_src c++
        struct Tables {
            int i;
            int vi[10];
            Table t1;
            Table vt[10];
        };
        
        Tables tt;
        //这里 vt t1,都会调用 tt的default ctor来创建。但是tt.i tt.vi却是uninitialized的状态
        //这是为了和c兼容
      #+end_src
    + 因为 const或者reference 类型必须被initialized.所以一个包含class or reference的class如果没有给他写一个
      default ctor，那么他无法default-construct成功
      #+begin_src c++
        class X {
        private:
            const int a;
            const int& r;
        };
        
        int main(int argc, const char *argv[])
        {
            X xx; //error:uninilized const part
            return 0;
        }
      #+end_src
*** Construction and Destruction
*** Local Variables
    + 如果类作为一个local variable，那么每次声明 local variable的时候都会调用ctor,每次离开 scope.
    + Dtor variable的顺序是和ctor的顺序相反的
**** Copying Objects
     + Table, t2 = t1 这种情况下，默认会做的就是memberwise copy of t1 into t2, 这种情况下如果class中含有
       pointer啥的，通常是非常危险的。因为会有多个指针指向同一个区域，删除的时候，也会删除多次！
     + 解决办法就是copy ctor & copy assignment
       #+begin_src c++
         Table::Table(const Table& t) //copy ctor
         {
             p = new Name[sz=t.sz];
             for (int i = 0; i < sz; i++)
                 p[i] = i.p[i];
         }
         Table& Table::operator=(const Table& t) //copy assignment
         {
             if (this != &t) {  //beware of self-assignment
                 delete[] p;
                 p = new Name[sz=t.sz];
                 for (int i = 0; i <sz; i++)
                     p[i] = t.p[i];
             }
         
             return *this;
         }
       #+end_src
*** Free Store
    + 如果是在heap上创建的对象，当new的时候ctor，delete的时候dtor
*** Class Object as Member
    + 如果class里面还有class，那么我们就要在初始化的时候，提供一个initializer list,初始化会从左往右按顺序
      初始化，析构的时候是按照_相反_的顺序析构
      #+begin_src c++
        Club::Club(const string& n, Date fd)
        :name(n), members(), officers(), founded(fd)
        {
            //........
        }
      #+end_src
**** Necessary Member Initialization
     + Member initialization绝不仅仅是为了提供一个初始化顺序而存在的，当某些情况下initialization 不等同于
       assignment(在ctor内部只能assignment，而不能initialization)的时候，只能依靠member initialization了，这种
       情况其实很多见，比如没有default ctor, reference
       #+begin_src c++
         class X {
             const int i;
             Club c;
             Club& pc;
             //...
             X(int ii, const string& n, Date d, Club& c):i(ii), c(n, d), pc(c) {}
         };
       #+end_src
     + 除了reference这种无法assignment的情况外，还有些情况是initialization明显比assigment效率高的，比如const
       #+begin_src c++
         class Person {
             string name;
             string address;
             //...
             Person(const Person&);
             Person(const string& n, const string& a);
         };
         Person::Person(const string& n, const string& a):name(n)
         {
             //Here, n is initialize with copy of n
             //while address is first initialized to the empty
             //string and then a copy of a is assigned.
             address = a;
         }
       #+end_src
**** Member Constants
     + 我们前面说过static的成员变量，必须在类外面另外的地方进行定义，但是如果是static同时const，那么就可以在
       class里面声明的时候定义了
       #+begin_src c++
         class Curious {
         public:
             static const int c1 = 7;   //ok, but remeber definition
             static int c2 = 11;        //error, no const
             const int c3 = 13;         //error, no static
             int c4 = 23;               //error, ISO C++ forbids in-class initialization of non-const static member
         };
       #+end_src
**** Copying Members
