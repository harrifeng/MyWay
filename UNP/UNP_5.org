* Chapter 5: TCP Client/Server Example
** Introduction
   + 我们下面的例子都是用前一章的函数来组合的，我们的echo server主要有如下步骤:
     1) client从standard input读取并写入server
     2) server从网络读取然后echo给client
     3) client读取结果在打印到standard output
   + 我们会研究很多的特殊情况，比如server主机crash等等
** TCP Echo Server: main Function
   + 我们来看看一个简单的echo server
     #+begin_src c
       #include "unp.h"
       
       int main(int argc, const char *argv[])
       {
           int         listenfd, connfd;
           pid_t       childpid;
           socklen_t   clilen;  
       
           struct sockaddr_in cliaddr, servaddr;
       
           listenfd = Socket(AF_INET, SOCK_STREAM, 0);
           bzero(&servaddr, sizeof(servaddr));
       
           servaddr.sin_family = AF_INET;
           servaddr.sin_addr.s_addr = htol(INADDR_ANY);
           servaddr.sin_port = htons(SERV_PORT);
       
           Bind(listenfd, (SA*)&servaddr, sizeof(servaddr));
       
           Listen(listenfd, LISTENQ);
       
           for (; ;) {
               clilen = sizeof(cliaddr);
               connfd = Aceept(listenfd, (SA*)&cliaddr, &clilen);
       
               if ( (childpid = Fork()) == 0) {
                   Close(listenfd);        /* close listening socket */
                   str_echo(connfd);       /* process the request    */
                   exit(0);         
               }
               Close(connfd);              /* parent closes connected socket */
           }
           return 0;
       }
     #+end_src
     - 先看listening connect的创建，server使用了well-known 端口SERV_PORT(这个
       是我们在unp.h里面定义的9877，仅仅做demo用)
     - 而IP地址则选择了INADDR_ANY
       的wildcard address, 选择wildcard 就是告诉kernel，server上面的任意一个
       local interface都可以指定给这个connection
** TCP Echo Server: str_echo Function
   + str_echo 函数是server的主要工作 
     #+begin_src c
       #include "unp.h"
       
       void str_echo(int sockfd)
       {
           ssize_t     n;
           char        buf[MAXLINE];
       
       again:
           while ((n = read(sockfd, buf, MAXLINE)) > 0)
               Writen(sockfd, buf, n);
       
           if (n < 0 && errno == EINTR)
               goto again;
           else if
               err_sys("str_echo: read error");
       }
     #+end_src
     - 如果client主动发起FIN结束connection，那么收到FIN后，会导致read函数返回0，
       从而结束str_echo函数(收到client的FIN，至少是half-close了)
** TCP Echo Client: main Function
   + 我们再来看看client端的socket的main函数
     #+begin_src c
       #include "unp.h"
       
       int main(int argc, const char *argv[])
       {
           int                 sockfd;
           struct sockaddr_in  servaddr;
       
           if (argc != 2)
               err_quit("usage: tcpcli <IP address>");
       
           sockfd = Socket(AF_INET, SOCK_STREAM, 0);
       
           bzero(&servaddr, sizeof(servaddr));
           servaddr.sin_family = AF_INET;
           servaddr.sin_port = htons(SERV_PORT);
           Inet_pton(AF_INET, argv[1], &servaddr.sin_addr);
       
           Connect(sockfd, (SA *)&servaddr, sizeof(servaddr));
       
           str_cli(stdin, sockd);  /* do it all */
       
           exit(0);
       }
     #+end_src
     - client 端的事情比较少, 主要就是connect，我们要记住client是不设置自己的IP
       地址啊，端口的。connect设置的socket address其实是设置的server端socket的信息，
       也就是它想要connect的那个socket.
** TCP Echo Client: str_cli Function
   + str_cli函数是client的主要工作，它通过fgets函数从stream(这里是stdin)获取数据，
     然后写到sock里面发送给server，再从server发送过来的socket里面读取数据写到
     stdout上面
     #+begin_src c
       #include    "unp.h"
       
       void
       str_cli(FILE *fp, int sockfd)
       {
           char    sendline[MAXLINE], recvline[MAXLINE];
       
           while (Fgets(sendline, MAXLINE, fp) != NULL) {
       
               Writen(sockfd, sendline, strlen(sendline));
       
               if (Readline(sockfd, recvline, MAXLINE) == 0)
                   err_quit("str_cli: server terminated prematurely");
       
               Fputs(recvline, stdout);
           }
       }
     #+end_src
** Normal Startup
   + 首先启动server, 在经历socket, bind，listen, accept之后，server会被block在accept
     (因为，completed connection queue是空的)，处于LISTEN state
     #+begin_example
       linux % tcpserv01 &
       [1] 17870
       
       linux % netstat -a
       Proto Recv-Q Send-Q Local Address  Foreign Address State
       tcp      0      0     *:9877            *:*        LISTEN 
     #+end_example
   + 然后启动client
     - client会调用socket, connect，connect开始的时候三次握手开始
     - connect在child里面返回，并且accept在server里面返回的时候,(这两者是connect
       先返回，client收到server发的ACK就可以返回了，accept收到client发的ACK才可
       以返回)三次握手就完成了，剩下的就是倒腾数据了
     - connect返回后，client调用str_cli，然后就会block在fgets，因为stdin上面没有数据
     - accept返回后, server会fork出child来调用str_echo，echo其实就是调用read，因为
       没有数据从client来，所以就block在read那里了
     - server不管child的事情了，自己又重新accept，然后block在那里等待下一个client
       connection
   + 现在我们就有三个process:client, server parent, server child，都是在block(sleep)
     的状态(wait_for_connect, tcp_data_wait, read_chan都是linux表示各种block的字符串)
     同时，可以用ps命令查看他们的网络状态可以通过netstat 来查看
     #+begin_example
       liunx % ps -t pts/6 -o pid,stat,args,wchan
       PID     STAT  COMMAND          WCHAN
       22038   S     -bash            wait4
       17870   S     ./tcpserv01      wait_for_connect
       19315   S     ./tcpserv01      tcp_data_wait
       19314   S     ./tcpcli01 127.0 read_chan 
       
       linux % netstat -a
       Proto Recv-Q Send-Q Local Address    Foreign Address State
       tcp      0      0   local host:9877  localhost:42758 ESTABLISHED
       tcp      0      0   local host:42756 localhost:9877  ESTABLISHED
       tcp      0      0    *:9877          *:*             LISTEN
     #+end_example
** Normal Termination
   + 正常的关闭是指的client端发送EOF(这里是通过ctrl+D发送)，如果发送完，我们马上
     执行netstat，client会进入TIME_WAIT状态(这个要相当快啊,我没试成功)
     #+begin_example
       linux % netstat -a | grep 9877
       tcp      0   0      *:9877               *:*              LISTEN
       tcp      0   0      localhost:42758      localhost:9877   TIME_WAIT
     #+end_example
   + 正常关闭函数的运行顺序:
     1) stdin输入EOF，feget返回NULL,然后str_cli返回
     2) str_cli的返回，会导致client main函数返回
     3) client main函数返回，会关闭所有socket descriptor，kernel就会据此关闭client
        socket，并发送FIN到server，server会回复以ACK,这就是half-close。此时，server
        处于CLOSE_WAIT state，client处于FIN_WAIT_2 state
     4) 当server TCP收到FIN的时候，server正被read函数block，最终这个read函数会返回
        0，从而导致str_echo函数返回
     5) str_echo返回，server的child也就是exit了
     6) 这样一来，child server的socket descriptor也就都关闭了，kernel会关闭这个socket
        并发送FIN给client，然后client会返回一个ACK,这样以后，server就成功关闭了，而
        client则进入了TIME_WAIT state
     7) kernel会发送一个SIGCHLD信号给parent server，当child server关闭的时候。
   + 这个时候child server就进入了zombie状态
** POSIX Signal Handling
   + 信号可以有如下两者发送方式:
     - process to process (or to itself)
     - kernel to process
   + SIGCHILD 信号就是从krnel发送给parent process的。
   + 一般来说，对待任何一个信号，我们都可以设置sigaction function来设置他们的
     disposition， 设置方法有三种:
     1) 为signal提供一个handler，SIGKILL，SIGSTOP不能被caught
     2) 忽略这个signal，SIGKILL, SIGSTOP不能忽略
     3) 设置disposition为SIG_DEF,就按照default方法来处理signal，通常来说default处理
        方式就是kill掉process
   + signal function是我们为了夸平台而写的一个wrapper函数
     #+begin_src c
       #include "unp.h"
       
       typedef void Sigfunc(int);
       
       Sigfunc* signal(int signo, Sigfunc* func)
       {
           struct sigaction act, oact;
       
           act.sa_handler = func;
           sigemptyset(&act.sa_mask);
           act.sa_flags = 0;
           if (signo == SIGALARM) {
       #ifdef  SA_INTERRUPT        
               act.sa_flags |= SA_INTERRUPT;         /* SunOS 4.x */
       #endif
           } else {
       #ifdef  SA_RESTART        
               act.sa_flags |= SA_RESTART;           /* SVR4, 4,4BSD */
       #endif
           }
           if (sigaction(signo, &act, &oact) < 0)
               return (SIG_ERR);
           return (oact.sa_handler);
       }
     #+end_src
     - Sigfunc是个typedef，因为signal第二个参数，和返回值都是一个指向函数的指针
       这个函数带一个int参数，返回void
     - sa_mask用来设定哪些signal在我们handler运行的时候，被block住，我们这里没有
       设置任何被block的signal
     - sigaction函数是把新的act设置，然后把旧的oact也同时返回过来，我们的signal
       就返回oact的sa_handler
   + 在POSIX 系统当中signal handling的特点有:
     - 一旦一个signal handler设置了，那它就一直有效
     - 一旦一个signal handler开始运行，那么这个signal和sa_mask里面设置的signal
       都同时被block住
     - 如果一个siganl被block的时候，同时又出现了一次同样的siganl，那么系统是不
       知道的，换句话说，signal是不queued的
     - 为了保护critical region code 不被某些signal打断，我们可以通过sigprocmask
       来进行block和unbock某些signal
     - 既然只是block，那么等handler执行完以后，我们还是可以继续处理刚才被block
       的signal的
** Handling SIGCHLD Signals
*** Handling Zombies
    + zombie信息不是我们想要的，我们要通过kernel发给parent的SIGCHLD来清除zombie
      状态的process，我们的方法是自己写一个handler:sig_chld
      #+begin_src c
        #include "unp.h"
        void sig_chld(int signo)
        {
            pid_t       pid;
            int         stat;
        
            pid = wait(&stat);
            /* attention: use printf in handler is not recommended */
            printf("child %d terminated \n", pid);
            return;
        }
      #+end_src
    + 在solaris上运行我们的程序，会有意想不到的情况
      #+begin_example
        solaris % tcpserv02 &
        [2] 16939
        solaris % tcpcli01 127.0.0.1
        hi there
        hi there
        ^D
        child 16942 terminated
        accept error: Interrupted system call
      #+end_example
      - child xxxx terminated是我们想要的结果，这其实是signal handler起作用了，但
        是accept error不是我们想要的
      - 产生accept error的原因是，server正block在slow system call accept的时候，捕
        获了SIGCHLD，kernel会中断accept，并且返回了EINTR, 而parent显然没有处理
        这个error的代码，于是就出问题了
      - 有很多系统实现会自动restart 被中断打断的system call, 同时，如果设置了flag
        SA_RESTART，也会自动重新调用被中断的system call，可惜solaris不属于任何一
        种情况，这给我们提了醒，我们在网络编程中，要时刻注意interrupted system
        call的情况。
*** Handling Interrupted System Call
    + 那些可以block forever的系统调用就叫做slow system call. 大部分networking
      function都属于这个范畴，比如accept function
    + 当function被slow system call block的时候，并且process捕获了一个signal，并且
      signal handler成功返回的话，slow system call会返回一个EINTR, 或者，有些系统
      不返回错误，而是kernel出面restart system call
    + 重启system call的话有些弊端，因为有些system call在某些系统实现中是从来都不
      成功的，所以我们要有特殊的应对方式
      #+begin_src c
        for (; ;) {
            clilen = sizeof(cliaddr);
            if ((connfd = accept(listenfd, (SA *)&chliaddr, &clilen)) < 0) {
                if (errno == EINTR)
                    continue;             /* back to for() */
                else
                    err_sys("accept error");
            }
        }
      #+end_src
    + accept ，read， write， select，open都可以使用上面的方法restart interrupt
      system call，但是如果系统没有自动为我们重启connect, 我们不可以如上手动
      重启
** wait and waitpid Functions
   + wait and waitpid都是为了处理zombie process设计的
     #+begin_src c
       #include <sys/wait.h>
       /* Both return: process ID if OK, 0 or -1 on error */
       pid_t wait(int *statloc);
       pid_t waitpid(pid_t pid, int *statloc, int options);
     #+end_src
     - 返回值返回wait到的process的ID, statloc返回这个child process的termination
       status
     - 如果没有terminated process，但是有process在运行，那么wait()会block等待
       第一个terminate的process
     - waitpid 的第一个参数可以让wait选择等待特定的process，如果设置为-1，那么
       就等同于wait():等待第一个完成的process
     - waitpid 的第三个参数可以增加更多的option，最常见的一个是WNOHANG, 意思是
       告诉kernel如果没有terminated process,就不再block，立即返回
*** Difference between wait and waitpid
    + wait显然没有waitpid强大，wait只能处理最常见的情况，复杂的情况还是要由
      waitpid出马
    + 其中一种复杂的情况就是同时有三个或者三个以上的FIN发动到server端，有三
      个或者三个以上的child 同时变成zombie，kernel会在极短时间内发送多个SIGCHLD
      到parent，parent最多能处理两个(handler运行的时候，会block一个，再多来的
      就被忽略了), 这种情况下就是waitpid出马了
      #+begin_src c
        for (i = 0; i < 5; i++) {
            sockfd[i] = Socket(AF_INET, SOCK_STREAM, 0);
            //...
            Connect(sockfd[i], (SA*)&servaddr, sizeof(servaddr));
        }
        
        /* should use waitpid for signal handler */
        void sig_chld(int signo)
        {
            pid_t pid;
            int   stat;
        
            while ((pid = waitpid(-1, &stat, WNOHANG)) > 0)
                printf("child %d terminated \n", pid);
            return;
        }
      #+end_src
** Connection Abort before accept Returns
   + 一种常见的错误是，在accept 调用之前，从child传来了RST
   + 这种问题的处理方法和处理interrupted system call类似，就是重新调用一次
     system call
** Termination of Server Process
   + 下面我们来看一下，如果server child process 关闭的情况，这种情况的特点是:
     - server parent并没有关闭
     - server child的结束会使得kernel发送一个SIGCHLD signal到parent, socket被正确
       关闭后，会发送一个FIN到child
     - child 接收到FIN，并不会有什么异样，因为:
       1) 即便是收到了server的FIN, 只是说明server close了它那一端的connection，
          client无法再读取了，但是依然可以写入
       2) 在我们这个例子中，client还被block在fgets, 等待从stdin的数据输入
     - 一旦fgets正确返回，还是能够成功调用writen写入socket, 因为刚才是half-close
       嘛，当然这个写入传到server的时候，会被server回复一个RST,因为相关的server
       已经关闭了
     - 但是client看不到这个RST了，因为writen之后，它马上调用readlien，我们说过
       half-closed肯定是不能read的，这个函数会返回0，然后打印错误"str_cli: server
       terminated prematurely"
     - 一旦出现错误，client也会乖乖关闭了，descriptor都关闭后，FIN也会发送给
       server，完成四步关闭步骤
   + 这个client的问题在于，它依赖于两个file descriptor，无法在server child 被kill
     的第一时间得到消息
** SIGPIE Signal
   + 如果上面例子中的client不管readline返回的错误，执意要往socket里面写东西的话
     第一次写入会导致server 发送一个RST, 第二次写入一个已经收到RST的socket，会
     产生一个SIGPIPE的signal
** Crashing of Server Host
   + Crashing of server就是把server的网线拔掉，这个也可以模仿那种由于中间路由问
     题导致的server不可达
   + 因为server什么都没发送，client会以为他一切正常，会不停的超时重发
   + 虽然最后client也会终究意识到server是真的关闭了，但是不同系统实现都会浪费
     大量的时间，一个可行的替代方法是在readline函数那里设置超时
** Crashing and Rebooting of Server Host
   + 这种情况下就是先拔了网线，然后重启机器，并且重启原来的server，重启后server
     连原来的descriptor都不记得了，面对client发过来的socket果断的返回RST
   + 看到server发来的RST, client果断的在readline就挂了，并产生ECONNRESET
   + 从这个例子我们看到了client能够探测server host 崩溃的必要性
** Shutdown of Server Host
   + 如果是server关机的话，init process其实是会给各个process发送SIGKILL signal的，
     所以descriptor都会关闭，那么FIN也会发送给client
   + 虽然发送了一个FIN,但是TCP connection还在half-close的情况下，server就关闭了
     client还是像5.12 termination of srver process 那一节一样读取socket 数据失败
     才知道server已经关闭了。所以最好是能提早知道server的关闭。
