* Chapter 1 Introduction
** Introduction
   + Web server呢就是只有从网络上有请求，它才会回应的
   + Web client主要工作就是通过网络，向Web Server发送请求
   + 某一个时段client只会像一个server发送请求，而一个server却常常在某一个时段，处理多个
     client发来的请求
   + client和server之间的沟通，都是通过application protocol, 而实际上的沟通可能都是在
     更下面的TCP, IP，直到物理层进行的
   + 一般来说client和server都是应用程序，而TCP和IP则都是内核中protocol stack的一部分
** A Simple Daytime Client
   + 先来看一个daytime client的实现方法
     #+begin_src c
       #include    "unp.h"
       
       int
       main(int argc, char **argv)
       {
           int                 sockfd, n;
           char                recvline[MAXLINE + 1];
           struct sockaddr_in  servaddr;
       
           if (argc != 2)
               err_quit("usage: a.out <IPaddress>");
       
           if ( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
               err_sys("socket error");
       
           bzero(&servaddr, sizeof(servaddr));
           servaddr.sin_family = AF_INET;
           servaddr.sin_port   = htons(13);    /* daytime server */
           if (inet_pton(AF_INET, argv[1], &servaddr.sin_addr) <= 0)
               err_quit("inet_pton error for %s", argv[1]);
       
           if (connect(sockfd, (SA *) &servaddr, sizeof(servaddr)) < 0)
               err_sys("connect error");
       
           while ( (n = read(sockfd, recvline, MAXLINE)) > 0) {
               recvline[n] = 0;    /* null terminate */
               if (fputs(recvline, stdout) == EOF)
                   err_sys("fputs error");
           }
           if (n < 0)
               err_sys("read error");
       
           exit(0);
       }
     #+end_src
*** Include our own header
    + unp.h里面是我们自己写的各种头文件，和error文件
*** Command-line 
    + 这个程序是需要输入参数的
*** Create TCP socket 
    + 这里socket函数带了两个参数AF_INET, SOCK_STREAM，就是TCP socket的别称,
      这里用sockfd来代表TCP socket
*** Specify server's IP address and port
    + client要创建一个连接，TCP socket是负责接受数据的，还要一个数据结构来确定
      server的位置，这就是sockaddr_in类型的servaddr
    + bzero就是把数据结构清零，它比memset好用(少一个参数，不容易用错)
    + inet_pton是IPV6中替代inet_addr的函数
*** Establish connection with server
    + 我们在unp.h里面define SA 成 struct sockaddr， sockaddr是generic socket
      address structure,每次用到pointer to socket address structure，都要cast
      到SA*
*** Read and display server's reply
    + 我们使用了while那一串的代码来处理得到的reply，主要原因是TCP返回结果的方式是不固定
      的，可能用一个TCP socket,也可能返回很多歌，所以我们要用while，一直read到0(表示
      成功结束),或者到负数(表示出现错误)
*** Terminate program
    + exit结束了整个函数，当process结束的时候，Unix会关闭所有我们程序中打开的descriptor
      这样以来，我们的TCP socket就关闭了。
** Protocol Independence
   + 我们再来看一个在ipv6版本下依然能工作的client
     #+begin_src c
       #include    "unp.h"
       
       int
       main(int argc, char **argv)
       {
           int                 sockfd, n;
           struct sockaddr_in6 servaddr;
           char                recvline[MAXLINE + 1];
       
           if (argc != 2)
               err_quit("usage: a.out <IPaddress>");
       
           if ( (sockfd = socket(AF_INET6, SOCK_STREAM, 0)) < 0)
               err_sys("socket error");
       
           bzero(&servaddr, sizeof(servaddr));
           servaddr.sin6_family = AF_INET6;
           servaddr.sin6_port   = htons(13);   /* daytime server */
           if (inet_pton(AF_INET6, argv[1], &servaddr.sin6_addr) <= 0)
               err_quit("inet_pton error for %s", argv[1]);
       
           if (connect(sockfd, (SA *) &servaddr, sizeof(servaddr)) < 0)
               err_sys("connect error");
       
           while ( (n = read(sockfd, recvline, MAXLINE)) > 0) {
               recvline[n] = 0;    /* null terminate */
               if (fputs(recvline, stdout) == EOF)
                   err_sys("fputs error");
           }
           if (n < 0)
               err_sys("read error");
       
           exit(0);
       }
     #+end_src
   + 这个版本问题也不少，虽然能在ipv6下工作了，但是ipv4却不行了，更好的解决办法是创建一
     个protocol-independent的版本
   + 另外，我们也最好用名字来代替IP Address
** Error Handling: Wrapper Functions
   + Wrapper Function在本文中的意思就是因为每次函数调用后都会进行错误处理，我们敢情
     把两者结合起来，创建一个一体的函数
     #+begin_src c
       sockfd = Socket(AF_INET, SOCK_STREAM, 0);
       int
       Socket(int family, int type, int protocol)
       {
           int n;
           if ( (n = socket(family, type, protocol)) < 0)
               err_sys("socket error");
           return (n);
       }
     #+end_src
   + 除了函数调用的时候会用到Wrapper Function,在thread 也加入到我们考虑范围内的时候，
     因为thread function不是在出错误的时候去设置errno variable(因为多个thread共享
     这个变量).而是在函数返回值的时候返回这个错误，这个时候，我们也可以利用wrapper
     function了。
     #+begin_src c
       void
       Pthread_mutex_lock(pthread_mutex_t *mptr)
       {
           int n;
           if ( (n = pthread_mutex_lock(mptr)) == 0)
               return;
           errno = n;
           err_sys("pthread_mutex_lock error");
       }
     #+end_src
*** Unix errno Value
    + 如果不是multiple thread的环境下面，通常是函数出现错误，就返回-1，然后把全局变量
      errno设置成一个代表错误类型的整数，通常这些整数在sys/errno.h里面都有宏定义，比如
      ETIMEDOUT这种名字
** A Simple Daytime Server
   + 说完client了，我们再看一个最简单版本的daytime server
     #+begin_src c
       #include    "unp.h"
       #include    <time.h>
       
       int
       main(int argc, char **argv)
       {
           int                 listenfd, connfd;
           struct sockaddr_in  servaddr;
           char                buff[MAXLINE];
           time_t              ticks;
       
           listenfd = Socket(AF_INET, SOCK_STREAM, 0);
       
           bzero(&servaddr, sizeof(servaddr));
           servaddr.sin_family      = AF_INET;
           servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
           servaddr.sin_port        = htons(13);   /* daytime server */
       
           Bind(listenfd, (SA *) &servaddr, sizeof(servaddr));
       
           Listen(listenfd, LISTENQ);
       
           for ( ; ; ) {
               connfd = Accept(listenfd, (SA *) NULL, NULL);
       
               ticks = time(NULL);
               snprintf(buff, sizeof(buff), "%.24s\r\n", ctime(&ticks));
               Write(connfd, buff, strlen(buff));
       
               Close(connfd);
           }
       }
     #+end_src
*** Create a TCP socket 
    + 通过socket函数来创建socket的方法和client中一样
*** Bind server's well-known port to socket
    + 和client中类似，我们也要申请一个sockaddr_in类型的变量，来存放socket的信息
    + 我们这里socket和socket 信息联系起来的函数是bind (client是connect)
    + 这里我们设置的是INADDR_ANY，允许任何IP address来的访问
*** Convert socket to listening socket
    + 通过调用listen函数，我们的socket就转化成了一个listening socket.
    + LISTENQ是我们unp.h里面定义的，表示内核队列会接受的最大连接数
*** Accept client connection, send reply
    + 通过accpet函数，server就会进入sleep状态，等待client连接的到来
    + TCP connection是使用的"三次握手"的方式来建立连接的，连接建立成功以后，accept
      函数就返回了，返回值就是connected descriptor.每次accept一个新的client，都会
      产生一个新的connected descriptor，那这个下一步的数据传输就依赖这个descriptor了
    + time函数返回自从1970年第一秒开始的秒数，然后用ctime转化成为人可以读的字符串形式
    + 在用snprintf函数将前24个字母以左对齐的方式写到buffer里面.
    + 最后通过write函数写入到connected descriptor里面，注意这里写入的就是strlen
      长度的buffer了
*** Terminate connection
    + while循环最后，使用close进行TCP connection的关闭，这会开始一个4个packet的
      关闭步骤
** Roadmap to Client/Server Examples in the Text
** OSI Model
   + All People Seem To Need Double Pizza
   + Transport层主要的协议就是TCp和UDP
   + Application Presentation Session最后合并成一个层，就是Application层，这
     本书主要介绍的，就是interface from application layer into the transport
     layer.
   + 之所以设计从前三层到后四层的interface是因为:
     1) 前三层不知道数据传输的细节，后四层不了解应用程序
     2) 前三层都是user process,而后四层则一般是OS kernel的一部分
** BSD Networking History
** Test Networks and Hosts
*** Discovering Network Topology
    + 多数unix-like系统都提供了netstat和ifconfig两个网络命令
** Unix Standards
** 64-Bit Architecture
   + 32-bit和64-bit数据长度比较
     |----------+--------+--------|
     | datatype | 32-bit | 64-bit |
     |----------+--------+--------|
     | char     |      8 |      8 |
     | short    |     16 |     16 |
     | int      |     32 |     32 |
     | long     |     32 |     64 |
     | pointer  |     64 |     64 |
     |----------+--------+--------|
   + socket API使用socklen_t而不是size_t
** Summary 
