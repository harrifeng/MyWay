* Chapter 7: Socket Options
** Introduction
** getsockopt and setsockopt Functions
   + 这两个方程的定义如下:
     #+begin_src c
       #include <sys/socket.h>
       int getsockopt(int sockfd, int level, int optname, void *optval,
                      socklen_t *optlen);
       int setsockopt(int sockfd, int level, int optname,
                      const void *optval socklen_t optlen);
     #+end_src
     - sockfd代表了一个打开的socket descriptor
     - level代表了是那种socket类型:IPV4，IPV6,TCP，SCTP
     - optval就是我们从getsockopt得到的设置，和从setsockopt要写入的设置
     - optlen自然就是optval的长度啦
** Checking if an Option is Supported and Obtaining the Default
   + 下面是check socket option的代码
     #+begin_src c
       #include    "unp.h"
       #include    <netinet/tcp.h>     /* for TCP_xxx defines */
       
       union val {
         int               i_val;
         long              l_val;
         struct linger     linger_val;
         struct timeval    timeval_val;
       } val;
       
       static char *sock_str_flag(union val *, int);
       static char *sock_str_int(union val *, int);
       static char *sock_str_linger(union val *, int);
       static char *sock_str_timeval(union val *, int);
       
       struct sock_opts {
         const char       *opt_str;
         int       opt_level;
         int       opt_name;
         char   *(*opt_val_str)(union val *, int);
       } sock_opts[] = {
           { "SO_BROADCAST",       SOL_SOCKET, SO_BROADCAST,   sock_str_flag },
           { "SO_DEBUG",           SOL_SOCKET, SO_DEBUG,       sock_str_flag },
           { "SO_DONTROUTE",       SOL_SOCKET, SO_DONTROUTE,   sock_str_flag },
           { "SO_ERROR",           SOL_SOCKET, SO_ERROR,       sock_str_int },
           { "SO_KEEPALIVE",       SOL_SOCKET, SO_KEEPALIVE,   sock_str_flag },
           { "SO_LINGER",          SOL_SOCKET, SO_LINGER,      sock_str_linger },
           { "SO_OOBINLINE",       SOL_SOCKET, SO_OOBINLINE,   sock_str_flag },
           { "SO_RCVBUF",          SOL_SOCKET, SO_RCVBUF,      sock_str_int },
           { "SO_SNDBUF",          SOL_SOCKET, SO_SNDBUF,      sock_str_int },
           { "SO_RCVLOWAT",        SOL_SOCKET, SO_RCVLOWAT,    sock_str_int },
           { "SO_SNDLOWAT",        SOL_SOCKET, SO_SNDLOWAT,    sock_str_int },
           { "SO_RCVTIMEO",        SOL_SOCKET, SO_RCVTIMEO,    sock_str_timeval },
           { "SO_SNDTIMEO",        SOL_SOCKET, SO_SNDTIMEO,    sock_str_timeval },
           { "SO_REUSEADDR",       SOL_SOCKET, SO_REUSEADDR,   sock_str_flag },
       #ifdef  SO_REUSEPORT
           { "SO_REUSEPORT",       SOL_SOCKET, SO_REUSEPORT,   sock_str_flag },
       #else
           { "SO_REUSEPORT",       0,          0,              NULL },
       #endif
           { "SO_TYPE",            SOL_SOCKET, SO_TYPE,        sock_str_int },
           { "SO_USELOOPBACK",     SOL_SOCKET, SO_USELOOPBACK, sock_str_flag },
           { "IP_TOS",             IPPROTO_IP, IP_TOS,         sock_str_int },
           { "IP_TTL",             IPPROTO_IP, IP_TTL,         sock_str_int },
       #ifdef  IPV6_DONTFRAG
           { "IPV6_DONTFRAG",      IPPROTO_IPV6,IPV6_DONTFRAG, sock_str_flag },
       #else
           { "IPV6_DONTFRAG",      0,          0,              NULL },
       #endif
       #ifdef  IPV6_UNICAST_HOPS
           { "IPV6_UNICAST_HOPS",  IPPROTO_IPV6,IPV6_UNICAST_HOPS,sock_str_int },
       #else
           { "IPV6_UNICAST_HOPS",  0,          0,              NULL },
       #endif
       #ifdef  IPV6_V6ONLY
           { "IPV6_V6ONLY",        IPPROTO_IPV6,IPV6_V6ONLY,   sock_str_flag },
       #else
           { "IPV6_V6ONLY",        0,          0,              NULL },
       #endif
           { "TCP_MAXSEG",         IPPROTO_TCP,TCP_MAXSEG,     sock_str_int },
           { "TCP_NODELAY",        IPPROTO_TCP,TCP_NODELAY,    sock_str_flag },
       #ifdef  SCTP_AUTOCLOSE
           { "SCTP_AUTOCLOSE",     IPPROTO_SCTP,SCTP_AUTOCLOSE,sock_str_int },
       #else
           { "SCTP_AUTOCLOSE",     0,          0,              NULL },
       #endif
       #ifdef  SCTP_MAXBURST
           { "SCTP_MAXBURST",      IPPROTO_SCTP,SCTP_MAXBURST, sock_str_int },
       #else
           { "SCTP_MAXBURST",      0,          0,              NULL },
       #endif
       #ifdef  SCTP_MAXSEG
           { "SCTP_MAXSEG",        IPPROTO_SCTP,SCTP_MAXSEG,   sock_str_int },
       #else
           { "SCTP_MAXSEG",        0,          0,              NULL },
       #endif
       #ifdef  SCTP_NODELAY
           { "SCTP_NODELAY",       IPPROTO_SCTP,SCTP_NODELAY,  sock_str_flag },
       #else
           { "SCTP_NODELAY",       0,          0,              NULL },
       #endif
           { NULL,                 0,          0,              NULL }
       };
     #+end_src
   + 下面才是调用getsocketoption的代码
     #+begin_src c
       int
       main(int argc, char **argv)
       {
           int                 fd;
           socklen_t           len;
           struct sock_opts    *ptr;
       
           for (ptr = sock_opts; ptr->opt_str != NULL; ptr++) {
               printf("%s: ", ptr->opt_str);
               if (ptr->opt_val_str == NULL)
                   printf("(undefined)\n");
               else {
                   switch(ptr->opt_level) {
                   case SOL_SOCKET:
                   case IPPROTO_IP:
                   case IPPROTO_TCP:
                       fd = Socket(AF_INET, SOCK_STREAM, 0);
                       break;
       #ifdef  IPV6
                   case IPPROTO_IPV6:
                       fd = Socket(AF_INET6, SOCK_STREAM, 0);
                       break;
       #endif
       #ifdef  IPPROTO_SCTP
                   case IPPROTO_SCTP:
                       fd = Socket(AF_INET, SOCK_SEQPACKET, IPPROTO_SCTP);
                       break;
       #endif
                   default:
                       err_quit("Can't create fd for level %d\n", ptr->opt_level);
                   }
       
                   len = sizeof(val);
                   if (getsockopt(fd, ptr->opt_level, ptr->opt_name,
                                  &val, &len) == -1) {
                       err_ret("getsockopt error");
                   } else {
                       printf("default = %s\n", (*ptr->opt_val_str)(&val, len));
                   }
                   close(fd);
               }
           }
           exit(0);
       }
     #+end_src
** Socket States
   + 下面几个socket option都会被一个connected TCP socket从listening socket继承得
     来，它们是:SO_DEBUG, SO_DONTROUTE, SO_KEEPALIVE, SO_LINGER, SO_OOBINLINE,
     SO_RCVBUF, So_RCVLOWAT, SO_SNDBUF, SO_SNDLOWAT, TCP_MAXSEG, TCP_NODELAY
** Generic Socket Options
*** SO_BROADCAST
    + 这个选项用来开启或者关闭广播消息
*** SO_DEBUG
    + 这个选项只被TCP支持，TCP socket开启了这个选项以后，kernel就一直保持着TCP得
      到或者失去的packet的详细信息
*** SO_DONTROUTE
    + 这个选项表示发送出去的packet跳过常规的路由机制
*** SO_ERROR
    + 通过读取SO_ERROR，我们就可以知道存放socket error的变量so_error的值
    + 这个选项只可以读取，不能设置。
*** SO_KEEPALIVE
    + keepalive选项是指，当双方向上在两小时时间内没有任何数据交流的时候，发送
      probe信息来了解当前两方peer的状态
    + 很明显，这个option可以用来探测某个host是否挂掉或者不可达，而且是server更经
      常使用这个option，因为server可以用这个option来检验client是否已经关机，或者
      crash了，那样的话，这个connection就可以结束了。
*** SO_LINGER
    + 这个选项决定了close function的某些特性:当connection关闭时，close默认情况下
      是马上返回，但是如果有数据还在传的话，我们可以通过设置SO_LINGER来保存这些
      数据
*** SO_OOBINLINE
    + 这个选项设置后，out-of-band的数据会被反正普通的input queue
*** SO_RCVBUF and SO_SNDBUF
    + 这两个选项让我们可以改变default size的大小
