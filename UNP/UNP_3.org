* Chapter 3: Sockets Introduction
** Introduction:
   + socket 里面的IP地址不能用text的，而要用binary的，这就需要一些地址转换函数:
     - inet_addr & inet_ntoa in IPv4
     - inet_pton & inet_ntop in both IPv4 and IPv6
   + 这些地址转换函数都是要依赖地址不同的，所以我们会在这里设计一系列的sock_
     开头的函数来独立于IP version
** Socket Address Structures
*** IPv4 Socket Address Structure
    + IPv4的address 也叫做"internet socket address structure"是依靠<netinet/in.h>里
      面的sockaddr_in来定义的:
      #+begin_src c
        struct in_addr {
            in_addr_t   s_addr;       /* 32-bit IPv4 address */
        };                            /* network byte ordered*/
        
        struct sockaddr_in {
            uint8_t         sin_len;      /* length of structure(16) */
            sa_family_t     sin_family;   /* AF_INET */
            in_port_t       sin_port;     /* 16-bit TCP or UDP port number */
                                          /* network byte ordered */
            struct in_addr  sin_addr;     /* see previous */
            char            sin_zero[8]   /* unused */
        };
      #+end_src
      - sin_len 是4.3BSD才加进来的一个域，而且POSIX没有强制要求, uint8_t也是根据
        系统不同相应提供的, 是POSIX定义的一种数据类型,定义在<sys/types.h>
      - 虽然length field在structure中，但是我们从来不会去设置它，除非我们要处理
        routing socket。真正要用到它的是kernel
      - 除非我们编译一个小的test program，否则我们无从知道系统是不是支持sin_len
        这个域，有些系统是通过compile-time option(_SOCKADDR_LEN)来支持的。总体上来
        说，保留这个域，主要是为了向前兼容
      - POSIX所要求的，只有中间三个域: sin_famil, sin_port, sin_addr。但是基本上所
        有的系统实现都加上了sin_zero这个填充变量，使得socket address最少是16bytes
      - 从上面的代码我们也不难发现，IPv4 address 我们可以通过serv.sin_addr或者
        serv.sin_addr.s_addr两种方法取得，不过第一个类型是in_addr，第二个类型是
        in_addr_t。
      - 子所以sin_addr是一个结构体，而不是一个内置类型，是因为历史原因,原来为了
        访问ABC三类地址，还把sin_addr设置成union.
      - sin_zero通常是为了凑够16byte的，因为我们在使用以前就把整个数据结构置0了，
        所以sin_zero一般也是零啦
*** Generic Socket Address Structure
    + 我们的address structure一般是传指针的。又由于bind, connect等socket function虽
      然把socket address structure的指针作为一个参数就要考虑到各种protocol的情况，
      也就是说，传递一个 struct sockaddr_in* 的类型进去，是非常不明智的。
    + 很明显，一般ANSI C中我们的做法就是传递一个void* 的类型，但是由于历史原因
      在ANSI C出现之前，就有这种问题，当时的解决办法，就是定义一个generic socket
      #+begin_src c
        struct sockaddr {
            uint8_t         sa_len;
            sa_family_t     sa_family;
            char            sa_data[14]; /* protocol-specific address */
        };
      #+end_src
    + 这就解释了我们的bind function的声明为什么是下面的样子
      #+begin_src c
        int bind(int, struct sockaddr *, socklent_t);
        
        /* usage example */
        struct sockaddr_in serv;
        /*must cast the pointer to the protocol-specific 
          socket address structure */
        bind(sockfd, (struct sockaddr *)&serv, sizeof(serv));
      #+end_src
*** IPv6 Socket Address Structure
    + IPv6 的结构定义在<netinet/in.h>, 如下
      #+begin_src c
        struct in6_addr {
            uint8_t s6_addr[16]; /* 128-bit IPv6 address */
        };                       /* network byte ordered */
        
        #define SIN6_LEN   /* required for compile-time tests */
        
        struct sockaddr_in6 {
            uint8_t         sin6_len;       /* length of this struct (28) */
            sa_family_t     sin6_family;    /* AF_INET6 */
            in_port_t       sin6_port;      /* transport layer port# */
            uint32_t        sin6_flowinfo;  /* flow information, undefined */
            struct in6_addr sin6_addr;      /* IPv6 address */
                                            /* network byte ordered */
            uint32_t        sin6_scope_id;  /* set of interfaces for a scope */
        };
      #+end_src
      - 我们define SIN6_LEN是为了以后程序可以#ifdef 来查找是否定义过SIN6_LEN,
        这个define是表明系统支持length member这个项
      - 所有的设置，通常会加个6，比如原来是AF_INT，现在变成了AF_INET6
      - 虽然有一个128-bit的成员变量sin6_addr，但是sockaddr_in6还是64-bit align
      - sin6_flowinfo分成了两部分:
        1) low-order 20 bits are the flow label
        2) high-order 12 bits are reserved
      - 定义一个区域，在这个区域内地址有意义
*** New Generic Socket Address Structure 
    + 在IPv6领域，我们同样定义了一个generic socket address structure 叫做struct
      sockaddr_storage:
      #+begin_src c
        struct sockaddr_storage {
            uint8_t         ss_len;         /* length of this struct */
            sa_family_t     ss_family;      /* address family: AF_XXX value */
            /* implementation-dependent elements to provide:
             * a) alignment sufficient to fulfill the alignment requirements of
             *    all socket address types that the system supports
             * b) enough storage to hold any type of socket address that the
             *    system supports
             */
        };
      #+end_src
      - 如果socket address structure需要align，那么可以通过sockaddr_storage来实现
      - sockaddr_storage设计的足够大到能装下系统支持的所有的socket address
        structure.
*** Comparison of Socket Address Structures
    + 我们在本书中会遇到如下五种 socket address structure:
      - IPv4 : sockaddr_in {}
      - IPv6 : sockaddr_in6 {}
      - Unix : sockaddr_un {}
      - Datalink: sockaddr_dl {}
      - Storage: sockaddr_storage {}
** Value-Result Arguments
   + 当一个socket address structure传递给socket function的时候，通常是pass by
     reference(因为传递的是指针)，同时structure的长度也作为一个参数传递进去
     但是具体这个长度如何传递，分了两种情况:
     1) From process to kernel: 这个时候长度会被作为函数的一个参数传进去，由于
        被明确告知，所以kernel知道到底该拷贝多少信息到kernel space.
        #+begin_src c
          struct sockaddr_in serv;
          
          /* fill in serv{} */
          connect(sockfd, (SA *)&serv, sizeof(serv));
        #+end_src
     2) From kernel to process: 从kernel space传递信息到process 的时候，长度参数
        通常是可变的，因为kernel不一定能够传递那么多的信息。(类似read函数有
        时候并没有成功read那么多byte的数据). 这种argument就被叫做value-result
        argument.因为kernel想要传value个数据，最后只传了result个数据
        #+begin_src c
          struct sockaddr_un cli; /*unix domain */
          socklen_t   len;
          
          len = sizeof(cli);            /* len is a value */
          getpeername(unixfd, (SA *) &cli, &len);
          /* len may have changed */
        #+end_src
   + 一般来说如果socket address structure是fixed-length的话，那么value-result
     argument返回的，也是fixed的，比如16 for IPv4，28 for IPv6, 而对于variable-
     length的socket address structure来说，返回的数据很可能就是小于structure最
     大值的任意数据
   + 网络编程中，最常见的value-result 情况就是socket address structure返回值的
     改变，但也有如下几种不常见情况:
     - select function
     - getsockopt function
     - msg_namelen, msg_controllen member
     - ifc_len member
     - sysctl function
** Byte Ordring Functions
   + little endian 和 big endian是长久困扰我的问题，关于这个问题，明确两点就
     容易理解了:
     1) endian的最小单位是byte
     2) little和big是指的多byte数据，最后是以最little的，还是最big的byte结尾
   + 以32-bit数字0x01020304为例，在little endian上面是04, 03, 02, 01在big endian
     上面的排序是01, 02, 03, 04
   + endian是不同系统实现自己决定的，对某个系统的endian我们称之为host byte order
     下面是一个判断host byte order的程序
     #+begin_src c       union {
           short   s;
           char    c[sizeof(short)];   
       }un;
       //usage of union is easy to forget at this point
       un.s = 0x0102;
       
       if (sizeof(short) == 2) {
           if (un.c[0] == 1 && un.c[1] == 2)
               printf("big-endian\n");
           else if (un.c[0] == 2 && un.c[1] == 1)
               printf("little-endian\n");
           else
               printf("unknown\n");
       }
       else
           printf(" sizeof short is not 2");     
      #+end_src
   + 有host byte order,那么就有对应的network byte order, network byte order就不需
     要判断了，一律都是big endian order
   + 在socket address structure中某些field必须使用network byte order, 所以我们就
     要使用下面的函数来转换host byte order和network byte order(注意，是host byte
     order, 而不是little endian order,说明这些函数会自动先判断一下endian，再做
     决定，如果机器本身就是big-endian那么就会啥都不做)
     | #include <netinet/in.h>                  |                                    |
     |------------------------------------------+------------------------------------|
     | uint16_t htons(uint16_t host16bitvalue); | return value in network byte order |
     |------------------------------------------+------------------------------------|
     | uint32_t htonl(uint32_t host32bitvalue); | return value in network byte order |
     |------------------------------------------+------------------------------------|
     | uint16_t ntons(uint16_t net16bitvalue);  | return value in host byte order    |
     |------------------------------------------+------------------------------------|
     | uint32_t ntonl(uint32_t nett32bitvalue); | return value in host byte order    |
     |------------------------------------------+------------------------------------|
     - h 代表 host
     - n 代表 network
     - s 代表 short 也就是TCP UDP port number这样的16-bit value
     - l 代表 long 也就是IPv4 address 这样的32-bit value
** inet_aton, inet_addr, inet_ntoa
   + 前面的htol之类的函数，是将数字转换成network order，但是我们的ip address通常
     是"206.168.112.96"之类的string，在原来的代码当中就有三个函数主要负责将string
     解析成network order binary
     - inet_aton
     - inet_addr
     - inet_ntoa
     | #include <arpa/inet.h>                                      |
     |-------------------------------------------------------------|
     | int inet_aton(const char *strptr, struct in_addr *addrptr); |
     | returns 1 if string was valid, 0 on error                   |
     |-------------------------------------------------------------|
     | in_addr_t inet_addr(const char *strptr);                    |
     | return 32-bit binary network byte ordered IPv4 address      |
     | return INADDR_NONE if error                                 |
     |-------------------------------------------------------------|
     | char *inet_ntoa(struct in_addr inaddr);                     |
     | return pointer to dotted-decimal string                     |
     |-------------------------------------------------------------|
   + inet_aton 是把strptr指向的字符串转化好以后，存放在addrptr, 另外如果addrptr
     是null pointer的话，这个函数转化为对对strptr指向string的valid检验
   + inet_addr问题很多:
     - 它出错的时候是返回INADDR_NONE, 这个是和255.255.255.255的binary value相同
     - 很多手册错误认为这个函数出错的时候，会返回-1
   + inet_ntoa也有两个问题:
     - 它没有用pointer做参数然后返回值的方法，这样导致返回值是在static memory
       的，所以函数不是reentrant的
     - 它的参数也是传入了一个结构体，而不是一个指针，这也是和大部分的函数定义
       不一样的
** inet_pton and inet_ntop functions
   + 这里提到的两个函数就是对IPv4和IPv6都适用的新函数，这里p代表presentation
     (human readable text)代表numeric (binary value)
     | #include <arpa/inet.h>                                                            |
     |-----------------------------------------------------------------------------------|
     | int inet_pton(int family, const chr *strptr, void *addrptr);                      |
     | Returns: 1 if OK, 0 if input not a valid presentation, -1 on error                |
     |-----------------------------------------------------------------------------------|
     | const char *inet_ntop(int family, const void *addrptr, char *strptr, size_t len); |
     | Returns: pointr to result if OK, NULL on error                                    |
     |-----------------------------------------------------------------------------------|
     - family 用来标示 AF_INET 或者 AF_INET6
     - 第一个函数试图把strptr里面的内容转化成binary的结果，存在addrptr里面，成功
       返回1， strptr的格式不对返回0，错误返回-1
     - 第二个函数是第一个函数的反转(注意，返回值设计成这样是为了连续的使用函数
       而不是仅仅从返回值返回结果), len是destination的长度大小
** sock_ntop and Related Functions
   + inet_ntop的问题是第一个参数的信息其实是包含在第二个参数里面的，比如下面:
     #+begin_src c
       struct sockaddr_in6 addr6;
       
       inet_ntop(AF_INET6, &addr6.sin6_addr, str, sizeof(str));
     #+end_src
   + 所以我们设计了一个sock_ntop如下(这个函数内部用到了static data，其实是不
     re-entrant的):
     #+begin_src c
       #include "unp.h"
       //return: non-unll pinter if OK, NULL on error
       char *sock_ntop(const struct sockaddr *sockaddr, socklen_t addrlen);
     #+end_src
   + 本书后面所有的sock_开头的，都是和sock_ntop差不多情况，我们自己实现的函数
     目的是为了更容易的实现代码
** readn, writen and readline Functions
   + 在socket里面的read 和 write 的行为和普通的IO操作有些不同，一次read或者write
     可能不能成功的写入(或读取)制定数目的byte，原因是由于kernel space太小buffer
     limit很容易达到。我们所需要做的，就是再次调用read和write就可以了。
   + readn : read n bytes from a descriptor
     #+begin_src c
       ssize_t
       readn(int fd, void *vptr, size_t n) {
           size_t  nleft;
           ssize_t nread;
           char    *ptr;
       
           ptr = vptr;
           nleft = n;
           while (nleft > 0) {
               if ( (nread = read(fd, ptr, nleft)) < 0) {
                   /* [EINTR] A read from a slow device was interrupted 
                    * before any data arrived by the delivery of a signal.
                    */
                   if (errno == EINTR)
                       nread = 0;      /* and call read() again */
                   else
                       return (-1);    /* error */
               } else if (nread == 0) {
                   break;              /* EOF */
               } 
       
               nleft -= nread;
               ptr += nread;
           }
           return (n - nleft);
       }
     #+end_src
   + writen : write n bytes to a descriptor: 实现方法是和readn非常相似的 
   + readline :read a text line from a descriptor
     #+begin_src c
       static int read_cnt;
       static char *read_ptr;
       static char read_buf[MAXLINE];
       
       
       my_read(int fd, char *ptr)
       {
           if (read_cnt <= 0) {
               again:
               if ( (read_cnt = read(fd, read_buf, sizeof(read_buf))) < 0) {
                   if (errno == EINTR)
                       goto again;
                   return (-1);
               }
               else if (read_cnt == 0)
                   return 0;
               read_ptr = read_buf;
           }
       
           read_cnt --;
           *ptr = *read_ptr++;
       static int read_cnt;
       static char *read_ptr;
       static char read_buf[MAXLINE];
       
       
       my_read(int fd, char *ptr)
       {
           if (read_cnt <= 0) {
               again:
               if ( (read_cnt = read(fd, read_buf, sizeof(read_buf))) < 0) {
                   if (errno == EINTR)
                       goto again;
                   return (-1);
               }
               else if (read_cnt == 0)
                   return 0;
               read_ptr = read_buf;
           }
       
           read_cnt --;
           *ptr = *read_ptr++;
           return (1);
       }
       
       ssize_t
       readline(int fd, void *vptr, size_t maxlen)
       {
           ssize_t  n, rc;
           char     c, *ptr;
       
           ptr = vptr;
           for (n = 1; n < maxlen; n++) {
               if ((rc = my_read(fd, &c)) == 1) {
                   *ptr++ = c;
                   if (c == '\n')
                       break;           /* newline is stored, like fgets() */
               } else if (rc == 0) {
                   *ptr = 0;
                   return (n - 1);      /* EOF, n - 1 bytes were read */
               } else
                   return (-1);         /* error, errno set by read() */
           }
       
           *ptr = 0;                    /* null terminate like fgets() */
           return (n);
       }
     #+end_src
