* Column1: Cracking The Oyster

** 1.6 Problems:

*** Problem 1
    If memory were not scare, how would you implement a sort in a language with libraries for representing and sorting sets?
    + C language
      #+begin_src c
        int intcomp(int *x, int *y)
        { return *x - *y; }
        
        int a[1000000];
        int main(void)
        {
            int i, n = 0;
            while (scanf("%d", &a[n]) != EOF)
                n++;
            /* usage of qsort is important */
            qsort(a, n, sizeof(int), intcomp);
            for (i = 0; i < n; i++){
                printf("%d\n", a[i]);
            }
        }
      #+end_src
    + C++ language
      #+begin_src c++
        /* this C++ program uses the set container from STL */
        int main(void)
        {
            set<int> S;
            int i;
            set<int>::iterator j;
            while (cin >> i){
                S.insert(i);
            }
            for (j = S.begin(); j != S.end(); ++j){
                cout << *j << "\n";
            }
            return 0;
        }                
      #+end_src


*** Problem 2
    How would you implement bit vector using bitwise logical operations (such as and, or and shift)?
    + We should understand the useage of MACRO, because the computer maybe 32-bit or 64-bit
      #+begin_src c bitwise_operation_demo
        #define BITSPERWORD 32
        #define SHIFT 5
        #define MASK 0x1F
        #define N 10000000
        int a[1 + N/BITSPERWORD];
        
        void set(int i) {        a[i>>SHIFT] |=  (1<<(i & MASK));}
        void clr(int i) {        a[i>>SHIFT] &= ~(1<<(i & MASK));}
        int test(int i) { return a[i>>SHIFT] &   (1<<(i & MASK));}
      #+end_src


*** Problem 3
    Run-time efficiency was an important part of the design goal, and the resulting program was efficit enough.
    Implement the bitmap sort on your system and measure its run time; how does it compare to the system sort and
    to the sorts in Problem 1? Assume that n is 10000000, and that the input file contains 1000000 integers.
    + To set up a test, complie two process, use pipe to connect them.
    + C/C++ language sort would be easy to set up the test
      For bitmap, the following is the demo code
      #+begin_src c build_up_test
        int main(int argc, char const* argv[])
        {
            int i;
            for (i = 0; i < N; i++)
                clr(i);
            while (scanf("%d", &i) != EOF)
                set(i);
            for (i = 0; i < N; i++){
                if (test(i))
                    printf("%d\n", i);
            }
            return 0;
        }
      #+end_src
    + I can see the difference between bitmap and c and cpp is not too much

      |   |               | C++ STL | C qsort | C bitmap |
      |---+---------------+---------+---------+----------|
      | / | <>            | <>      | <>      | <>       |
      | # | Total Seconds | 45.649  | 42.828  | 42.245   |


*** Problem 4
    If you take Problem 3 seriously, you will face the problem of generating k integers less than n without duplicates,
    The simplest approach uses the first k positive integers. This extreme data set won't alter the run time of the 
    bitmap method by much, but it might skew the run time of a system sort. How would you generate a file of k unique
    random integers between 0 and n-1 in random order? Strive for a short program that is also efficient.
    + Following is the code, its essential part is to swap the number, in other words, the algorithm is to generate a location,
      and put the location's content to the front. Next time, if the same location is randomed, the content is different.
      In this way, the algorithm keeps the content unique.
      #+begin_src c unique_random_set
        #include <stdlib.h>
        #include <stdio.h>
        #define NUM    1000000
        #define TOTAL 10000000
        
        void swap(int *a, int *b)
        {
            int t;
            t = *a;  *a = *b;  *b = t;
        }
        
        int randint(int M, int N)
        {
            return M + rand()/ (RAND_MAX/(N-M+1) + 1);
        }
        
        int main()
        {
            int i;
            int arr[TOTAL];
            for (i = 0; i < TOTAL; i++){
                arr[i] = i;
            }
            for (i = 0; i < NUM; i++){
                /*randint(l,u) returns a random integer in l ... u*/
                int k = randint(i, TOTAL - 1);
                swap(&arr[i], &arr[k]);
                printf("%d ", arr[i]);
            }
            return 0;
        }      
      #+end_src

        
        

*** Problem 5
    The programmer said that he had about a megabyte of free storage, but the code
    we sketched uses 1.25megabytes. He was able to scrounge the extra space without
    much trouble. If the megabyte had been a hard and fast boundary, what would you
    have recommended? what is the run time of your algorithm?
    + This problem also comes from the bitmap question, as if you use bitmap to stand
      for the 10,000,000 number, it will use 10,000,000 bits, in other words, 1.25 
      megabytes. A two-pass algorithm solves this problem. That is to say, first sort
      0 to 4,999,999. then sort 5,000,000 to 9,999,999


*** Problem 6
    What would you recommend to the programmer if, instead of saying that each integer
    could appear at most once, he told you that each integer could appear at most ten
    times? How would your solution change as a function of the amount of available 
    storage?
    + We can also use bitmap to storage the count, we use 4 bits, rather than 1 bit to 
      stand for the occurence. The total memory usage would be 10,000,000*4/8 Bytes


*** Problem 7
    [R. Weil] The program as sketched has several flaws. The first is that it assumes that
    no integer appears twice in the input. What happens if one does show up more than once?
    How could the program be modified to call an error function in that case? What happened
    when an input integer is less than zero or greater than or equal to n? What if an input
    is not numeric? What should a progam do under those circumstances? What other sanity 
    check could the program incorporate? Describe small data sets that test the program, 
    including its proper handling of these and other ill-behaved cases.
    + This shows the important of error handling, for C language, these sanity check should
      be done at the beginning of every program. for more complicated language like C++, 
      exception should be used.


*** Problem 8
    When the programmer faced the problem, all toll-free phone numbers in the United States
    had the 800 area code. Toll-free codes now include 800,877 and 888, and the list is 
    growing. How would you sort all of the toll-free numbers using only a megabyte? How can
    you store a set of toll-free numbers to allow very rapid lookup to determine whether a 
    given whether a given toll-free number is available or alreay taken?
    + This can be solved by bitmap, about the rapid lookup for availablity, it is the test
      bit function, as below. Detailed information can be found at Problem 2
      #+begin_src c 
         int test(int i) { return a[i>>SHIFT] & (1<<(i & MASK))
      #+end_src


*** Problem 9
    One problem with trading more space to use less time is that  initializing the space can
    itself take a great deal of time. Show how to circumvent this problem by dssigning a 
    technique to initialize an entry of a vector to zero the first time it is accessed. Your
    scheme should use constant time for initialization and for each vector access, and use 
    extra space proportional to the size of the vector. Because this method reduces initialization 
    time by using even more space, it should be considered only when space is cheap, time is
    dear and the vector is sparce.
    + The effect of initializing the vector data[0...n-1] can be accomplished with a signature 
      contained in two additional n-element vectors, from and to, and an integer top. If the
      element data[i] has been initialized, then from[i] < top and to[from[i]] = i. Thus from
      is a simple signature, and to and top together make sure that from is not accidentally signed
      by the random contents of memory.
   
      | / | <>   | <> | <> | <> | <> | <> | <> | <> | <> |
      | # | data |    |  3 |    |  2 |    |  8 |    |    |
      |---+------+----+----+----+----+----+----+----+----|
      | # | from |    |  0 |    |  2 |    |  1 |    |    |
      |---+------+----+----+----+----+----+----+----+----|
      | # | to   |  1 |  5 |  3 |    |    |    |    |    |
                                  

    + The variable top is initially zero; the array element i is first accessed by the code
      #+begin_src c
         from[i] = top;
         to[top] = i;
         data[i] = 0;
         top++;
      #+end_src

    + This problem contains key indexing and wily signature scheme.

*** Problem 10
    Before the days of low-cost overnight deliveries, a store allowed customers to 
    order items over the telephone, which they picked up a few days later. The store's
    database used the customer's telphone number as the primary key for retrieval 
    (customer know their phone numbers and the keys are close to unique). How would
    you organize the store's databse to allow orders to be inserted and retrieved efficiently?
    + The store placed the paper orders forms in a 10*10 array of bins, using the last
      two digits of the customer's phone number as the hash index. When the customer
      telephoned an order, it was placed in the proper bin. When the customer arrived 
      to retrieve the merchandise, the salesperson sequentially searched through the 
      orders in the appropriate bin - This is classical 'open hasing with collision 
      resolution by sequential search'
    + The last two digit of the phone number are 
      quite close to random and therefore an excellent hash function, while the first
      two digit would be a horrible hash function - why? Some municipalities use a 
      similar scheme to record deeds in sets of record books.


*** Problem 11
    In the early 1980's Lockheed engineers transmitted daily a dozen drawins from a
    Computer Aided Design(CAD) System in their Sunnyvale, California, plant to a
    test station in Santa Cruz. Although the facilites was just 25 miles apart, an
    automobile courier service took over an hour (due to traffic jams and mountain
    roads) and cost a hundred dollars per day. Propose alternative data transmission
    schemes and estimate their cost
    + The answer seems like a joke: the engineer use the pigeon to transmit file.

*** Problem 12
    Pioneers of human space flight soon realized the need for writing implements that 
    work well in the extreme environment of space. A popular urban legend asserts that
    the United States National Aeronautics and Space Administration (NASA) solved the
    problem with a million dollars of research to develop a spcial pen. According to 
    the legend, how did the former Soviet Union solve the same problem?
    + Pencil, of course.
