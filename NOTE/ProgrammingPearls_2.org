* Column2: AHA! Algorithms
  A problem that seems difficult may have a simple, unexpected solution

** Three Problems
   + A. Given a sequential file that contains at most four billion 32-bit integers in random
     order, find a 32-bit integer that isn't in the file. How would you solve this problem with
     ample quantities of main memory? How would you solve it if you could use several external
     "scratch" file but only a few hundred bytes of main memory?
   + Rotate a one-dimensional vector of n elements left by i positions. For instance,  with n=8
     and i=3, the vector abcdefgh is rotated to defghabc. Simple code uses an n-element intermediate
     vector to do the job in n steps. Can you rotate the vector in time proportional to n using 
     only a few dozen extra bytes of storage?
   + Given a dictionary of English words, find all sets of anagrams. For instance, "pots", "stop"
     and "tops" are all anagrams of one another because each can be formed by permuting the letters
     of the others.

** Ubiquitous Binary Search
   + We initially know that the object is within a given range, binary search is a very good solution.
   + Sequential search uses about n/2 comparisons on average to search a table of n elements, while
     binary search never uses more than about log_2N comparisons.
   + Programmers start with the simple data structure of sequential search, which is often fast enough.
     if it becomes too slow, sorting the table and using a binary search can usually remove the bottleneck.
   + Of course, if we have ample memory, we can use the bitmap technique from Column 1. 
   + But also, we need to solve this problem with a few hundred bytes of memory. Apparently, the solution 
     should be binary search, the question is how to configure binary search. Following is Ed Regingold's
     solution:
     1) In order to save memory, we will put all the numbers in the file.
     2) It is helpful to view this binary search in term of the 32 bits that represent each integer.
     3) First time, we split the numbers by last bit of the number (you can compare it split odd and even
        number.
     4) After the first around, we will have two files, the bigger one is abandoned, we will began the second
        round spliting the numbers by last second bit.
     5) Finally, we will be able to find this missing number in the smallest file.
     6) This problem can also be found by sorting the file and then scanning, but that would require time proportional 
        to n log n, rather than n.
   
** The Power of Primitives
   + Problem B is to rotate the n-element vector x left by i positions in time proportional to n and with just 
     a few bytes of memory. First we have to say this kind of rotate is very common, such as in vector's operation,
     or more important, rotation corresponds to swapping adjacent block of memory of unequal size: whenever
     you drag-and-drop a block of text elsewhere in a file, you ask the program to swap two blocks of memory.
   + The solution can be concluded as : two negatives make a positive.
     #+begin_src c
       reverse(0, i-1) /* cbadefgh */
       reverse(i, n-1) /* cbahgfed */
       reverse(0, n-1) /* defghabc */     
     #+end_src

** Getting It Together: Sorting
   + It is obvious that Problem B can not be solved by multiplications, we need a smarter algorithm. The essential
     part of this algorithm is that words in the same anagram class have the same signature
   + so "dopiest" and "deposit" share a same signature "deposite", which is sorted alphabetically.

** Principles
*** Sorting:
    + The most obvious use of sorting is to produce sorted output, either as part of the system specification
      or as preparation for another problems
    + In the anagram problem, ordering the letters within a word provides a canonical form for the words within
      an anagram class.
*** Binary Search:
    + The algorithm for looking up an element in a sorted table is remarkably efficient and can be usd in main 
      memory or on disk
    + Its only drawback is that the entire table must be known and sorted in advance.
*** Signatures
    + When an equivalence relation defines classes, it is helpful to define a signature such that every item in
      the same class has the same signature and no other item does.
    + Sorting the letters within a word yields one signature for an anagram class
    + Another knid of signature might be following: "mississippi" may have a signature "i4m1p2s4", and so on.
*** Problem Definition
    + Column 1 show the importance of determining what the user really want, Column 2 is the next step in 
      problem definition: what primitives will we use to solve the problem?
*** A Problem Solver's Perspectie
    + Good programmers are a little bit lazy: they sit back and wait for an insight rather than rushing forward
      with their first idea.

** Problems
*** Problem 1
    Consider the problem of finding all the anagrams of a given input word. How would you solve this problem
    given only the word and dictionary? What if you could spend some time and space to process the dictionary 
    before answering any questions?
    + To find all anagrams of a given word we first compute its signature, if no preprocessing is allowed then
      we have to read the entire dictorary sequentially, compute the signature of each word, and compare the 
      two signatures.
    + With preprocessing, we could perform a binary search in a precomputed structure containing (signature, word)
      pairs sorted by signature.
*** Problem 2
    Given a sequantial file containing 4,300,000,000 32-bit integers, how can you find one that appears at least twice?
    + I can not follow the answer very much, as for me, the best way is to use the bitmap to stand for these numbers,
      one bit per number, firstly, all zero, then if one number appears once, the bit become one, if appears and the 
      corresponding bit is already one, it shows that the number appears twice.

*** Problem 3
    We skimmed two vector rotation algorithm that require subtle code; implement each as a program. How does the greatest
    common divisor of i and n appear in each program?
    + The "juggling" code rotates x[n] left by rotdist. Its essential part is to find the right place to go, at the first
      time
      #+begin_src c
        #include <iostream>
        using namespace std;
        
        /* get i and j 's greatest common divisor */
        int gcd(int i, int j)
        {
            while (i != j){
                if (i > j)
                    i -= j;
                else
                    j -= i;
            }
            return i;
        }
        
        /* Every time we use x[j] = x[k] to put the right
           value for right slot */
        void juggling(int* x, int n, int rotsit)
        {
            for (int i = 0; i < gcd(rotsit, n); i++){
                int t = x[i];
                int j = i;
                while(1){
                    int k = j + rotsit;
                    if (k >= n)
                        k -= n;
                    if (k == i)
                        break;
                    x[j] = x[k];
                    j = k;
                }
                x[j] = t;
            }
        }
        
        int main()
        {
            int arr[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
            for (int i = 0; i < 10; i++){
                cout << arr[i] << endl;
            }
        
            juggling(arr, 10, 4);
            cout << "----------" << endl;
            for (int i = 0; i < 10; i++){
                cout << i << " " <<  arr[i] << endl;
            }
        }
      #+end_src

*** Problem 4
    Several readers pointed out that while all three rotation algorithms require time proportional to n, the juggling algorithm
    is apparently twice as fast as the reversal algorithm: it stores and retrieves each element of the array just once,
    while the reversal algorithm does so twice. Experiment with the functions to compare their speeds on real machines;
    be especially sensitive to issue surrounding the locality of memory references.
    + Well, I have to say, I can't understant its meaning, the Bentley said, if rotation is larger than 1, the Block Swap
      has a better performance, because its good caching behavior. While the Juggling performs badly because of its bad
      caching behavior.

*** Problem 5
    Vector rotation functions change the vector ab to ba, how would you transform the vector abc to cba? (This models the 
    problem of swapping nonadjacent blocks of memory).
    + The answer is simple:
    |   a |   b |   c |
    | 123 | 456 | 789 |
    | 321 | 654 | 987 |
    | 789 | 456 | 123 |

*** Problem 6
    In the late 1970's, Bell Labs deployed a "user-operated directory assistance" program that allowed employees to look
    up a number in a company telemphone directory using a standard push-button telephone. To find the number of the designer
    of the system, Mike Lesk, one pressed "LESK*M*" (that is "5375*6*") and the system spoke his number. Such services are 
    now ubiquitous. One problem that arises in such systems is that different names may have the same push-button encoding;
    when this happends in Lesk's system, it asks the uer for more information. Given a large file of names, such as a standard
    metropolitan telephone directory, how would you locate these "false matches" ? (When Lesk did this experiment on such 
    telephone directories, he found that the incidence of false matches was just 0.2 percent.) How would you implement the
    function that is given a push-button encoding of a name and returns the set of possible matching names?
    + The signature of a name is is push-button encoding, so the signature of "LESK*M*" is "5375*6*". To find the false matches
      in a directory, we sign each name with its push-button encoding, sort by signature (and by name within equal signatures), 
      and then sequentially read the sorted file to report andy equal signatures with distinct names. To retrieve a name given 
      its push-button encoding we use a structure that contains the signatures and the other data. While we could sort that
      structure and then look up a push-button encoding by binary search, in a real system we would probably use hasing or a 
      database system.

*** Problem 7
    In the early 1960's, Vic Vyssotsky worked with a programmer who had to transpose a 4000-by-4000 matrix stored on matrix 
    stored on magnetic tape(each record had the same format in serveral dozen bytes). The original program his colleague 
    suggested would have taken fifty hours to run; how did Vyssotsky reduce the run time to half an hour?
    + Previously there is one such matrix:
      | 1 | 2 | 3 |
      | 4 | 5 | 6 |
      | 7 | 8 | 9 |
    + Will be stored on magnetic tape in this order: 1,2,3,4,5,6,7,8,9
    + Vyssotosky gave the number location information like this:
      [0,0]1, [0,1]2, [0,2]3, [1,0]4, [1,1]5, [1,2]6, [2,0]7, [2,1]8, [2,2]9
      We can find that this order is sorted by row first and then by column
    + We then sorted previous sequence by column first, then row. The sequence will be
      [0,0]1, [1,0]4, [2,0]7, [0,1]2, [1,1]5, [2,1]8, [0,2]3, [1,2]6, [2,2]9
    + 1,4,7,2,5,8,3,6,9 will result matrix like this:
      | 1 | 4 | 7 |
      | 2 | 5 | 8 |
      | 3 | 6 | 9 |

*** Problem 8
    [J.Ullman] Given a set of n real numbers, a real number t, and an integer k, how quickly can you determine whether there
    exists a k-element subset of the set that sums to at most t?
    + The key for this problem is that some k-element subset sums to at most t if and only if the subset consisting of the k
      smallest element does. 
    + That subset can be found in time proportional to n log n by sorting the original set, or in time proportional to n by 
      using a selection algorithm (Problem 9 in Column 11)

*** Problem 9
    Sequential search and binary search represent a tradeoff between search time and preprocessing time. How many binary search
    need be performed in an n-element table to buy back the preprocessing time required to sort the table?
    + Sorting the table will be finished in tim proportional to n log n, searching then would be reduced to logn
    + Sequential search will always to be n/2
    + nlogn + Xlogn = Xn/2 => X will be the threshold value. 

*** Problem 10
    On the day a new researcher reported to work for Thomas Edison, Edison asked him eo compute the volume of an empty light bulb 
    shell. After several hours with calipers and calculus, the fresh hire returned with the answer of 150 cubic centimetrs. In a
    few seconds, Edison computed and responded "closer to 155" - how did he do it?
    + Edison filled the shell with water and emptied it into a graduated cylinder.

** Further Reading
   You can find several good books on algorithm on section8.8
** Implementing an Anagram Program
   + We can implement the program by 3 parts
     pans               anps pans                anps pans
     pots               opst pots                anps snap                 pans snap
     opt    -> SIGN ->   opt opt   -> SORT ->     opt opt   -> SQUASH ->      opt
     snap               anps snap                opst pots               pots stop tops
     stop               opst stop                opst stop
     tops               opst tops                opst tops

   + SORT is implemented by system sort

   + SIGN is implemented by following code
     #+begin_src c       #include <stdio.h>
       #include <stdlib.h>
       #define WORDMAX 100
       
       int charcomp(char *x, char *y)
       {
           return *x - *y;
       }
       
       int main()
       {
           char word[WORDMAX], sig[WORDMAX];
           while(scanf("%s", word) != EOF) {
               strcpy(sig, word);
               qsort(sig, strlen(sig), sizeof(char), charcomp);
               printf("%s %s\n", sig, word);
           }
           return 0;
       }
       #+end_src

   + squash is implemented by following code
     #+begin_src c       #include <stdio.h>
       #define WORDMAX 100
       
       int main()
       {
           char word[WORDMAX], sig[WORDMAX], oldsig[WORDMAX];
           int linenum = 0;
           strcpy(oldsig, "");
           
           while (scanf("%s %s", sig, word) != EOF) {
               if (strcmp(oldsig, sig) != 0 && linenum > 0)
                   printf("\n");
               strcpy(oldsig, sig);
               linenum ++;
               printf("%s ", word);
           }
           printf("\n");
           return 0;
       }
       #+end_src

   + Input the words into the file dictionary and type following in the shell:
     sign < dictionary | sort | squash > gramlist

