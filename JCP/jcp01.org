* Chapter 1: Introduction
** A Brief History of Concurrency
   + 以下几个因素促使操作系统考虑多个程序同时运行:
     - 有时候程序会等待外部io输入，允许多个程序同时运行可以利用这段时间
     - 多个用户或者程序应该被同等对待，出于公平也要允许同时运行
     - 多个程序相互通信完成一件工作，比单独只写一个程序来的更加方便
   + 同样出于上面三种要求，thread诞生了:在一个程序里面，现在允许共存多个program
     control flow
   + thread之间共享内存和文件句柄，但是每个thread却拥有自己的program counter,
     stack, local variables(把它们想象成函数，就容易记忆了)
   + thread能够最大限度的利用多核处理器:同一个程序的不同thread可以被同时映射到不
     同的CPU来进行处理
   + thread由于要共享内存，所以我们要付出一些同步的努力来防止因为内存问题导致的
     thread读取数据错误
** Benefits of Threads
   + 在GUI的程序当中thread可以用来提高响应，在server程序当中，thread可以用来提高
     资源利用率和吞吐量
*** Exploiting Multiple Processors
    + 因为thread是调度最基本单位，所以，多thread程序更有机会发挥多核CPU的性能
    + 即便是在单核CPU中，由于能够在thread等待的时候，调用其他thread，所以这种情
      况下，多线程也可以提高性能。
*** Simplicity of Modeling
    + 我们发现当我们的工作是一种类型的时候，比如fix几个bug，那么事情就容易管理，
      效率也特别高(相比于又面试，又开发，又测试，又fixbug).同样的，将一个程序当
      中不同部分按功能分到各个thread中，可以提高我们的开发效率
*** Simplified Handling of Asynchronous Event
    + 我们知道，我们可以利用non-blocking IO来达到避免等待IO而使得server失去响应，
      但是 non-blocking IO的缺点是非常复杂而且比起synchronous IO来，更容易出错
    + 多线程就可以很好的不利用non-blocking IO来解决asynchronous event的问题
    + 由于操作系统原来允许的thread数目很小，现在已经有NPTL thread package等技术
      出来来提高操作系统默认的thread的数目
*** More Responsive User Interfaces
    + GUI程序在thread的帮助下更加的responsive
** Risks of Threads
*** Safety Hazards
    + 多线程编程最大的挑战，是难于测试，每次thread发生的顺序不一样，会导致结果不
      同，下面的代码就可能由于不幸运的调用次序，而产生两个thread都调用getNext却
      得到相同值的情况
      #+begin_src java
        @NotThreadSafe
        public class UnsafeSequence {
            private int value;
        
            /* Returns a unique value */
            public int getNext() {
                return value++;
            }
        }
      #+end_src
    + 危险产生的原因是因为threads可以共享一个相同的memory address, 在带来轻松共
      享数据的同时，也意味这很多风险，这都是由于非线性的访问共享数据造成的
    + Java提供了如下的同步机制来访问共享数据
      #+begin_src java
        @ThreadSafe
        public class Sequence {
            @GuardeBy("this") private int nextValue;
        
            public synchronized int getNext() {
                return nextValue++;
            }
        }
      #+end_src
    + 如果没有synchronized这个关键字的话，编译器，硬件都会对数据，操作做很多优化，
      对于多线程来说，这些优化是非常危险的。
*** Liveness Hazards
    + 线程的引入，同样引入了liveness failure的概念(也就是我们所说的 deadlock,
      starvation, livelock)， 这些问题都非常难以发现
*** Performace Hazards
    + 线程的使用，也是又消耗的，这些消耗也会造成性能方面的损失。
      - 执行上下文的保存
      - CPU用来调度线程
      - 同步机制访问数据
      - 清空内存cache
** Threads are Everywhere
   + 每一个java程序都会用到多线程，因为当JVM开始的时候，他会创建一个JVM
     housekeeping task(用来垃圾回收)，一个main thread来运行main,等等，所以在java
     中到处都是多线程，你不可能逃避
