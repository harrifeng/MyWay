* Chapter 4: Process Scheduling
** Multitasking
   + 多任务操作系统是可以同时运行多个process，每个process占用一段时间cpu后
     再让给其他process
   + 多任务操作系统分两者:
     - 合作式多任务(cooperative multitasking)
     - 抢占式多任务(preemptive multitasking) 
   + Linux属于抢占式多任务系统，这种系统中scheduler来决定process何时运行，
     这次运行多少时间(timeslice)，运行时间都是根据表现，动态确定的
   + 合作式多任务系统就是scheduler无法控制process，process自己来决定什么时
     候放弃cpu
** Linux's Process Scheduler
   + 早先Linux的scheduler非常简陋，从2.5开始，引入了O(1) scheduler
   + 后来发现O(1) scheduler对于interactive process的处理很不理想，所以从
     version2.6.23开始，引入了CFS(Completely Fair Scheduler)
** Policy
*** I/O-Bound Versus Processor-Bound Processes
    + process通常分成两类:
      - I/O-bound : 花费大量时间等待 IO, 比如GUI
      - processor-bound : 花费大量时间执行代码，比如一个空循环
    + Linux更偏向于I/O-bound的process，以便提供更好的程序响应
*** Process Priority
    + Linux有两套priority range:
      - nice value: nice越大，说明对别人越好，自己的优先级就越低
      - real-time priority: 和nice想反的是，real-time priority越大，优先级越
        高,而且，所有的real-time process的级别都高于任意普通process
*** Timeslice
    + 对于时间片的要求，不同类型process是不同的，比如IO-bound的process就不
      需要太大的时间片(虽然他们需要经常使用),而processor-bound的process就需
      要更大一点的时间片
    + 新的CFS系统是分配的CPU的比例，nice value高的(优先级低的)就得到比较
      少的CPU使用比例
    + 我们知道Linux是可抢占的，那抢占时候所看的，就是两个process已经消耗
      的cpu的比例，消耗的少的，会替代消耗的多的(因为消耗的少的，说明之
      前运行的少)
*** The Schedulling Policy In Action
    + 我们来举个例子说明CFS的调度策略，比如我们只有两个进程，一个是text
      editor,一个是video encoder.而且nice value相同
    + 开始的时候，两个process分别被分配了50%的CPU time, 但是因为text editor
      因为其实一直在等IO所以用到的不多。当一个key传到text editor，它要被
      唤醒的时候，kernel会比较text editor和video encoder的CPU使用的比例:很
      显然text editor使用的很少，它将抢占video encoder.
    + 上述抢占在老的调度策略中，是赋予text editor一个比较高的priority，然后
      在唤醒的时候，比较谁的priority高。而priority又要经常动态的去更新:根据
      process最近的表现
** The Linux Scheduling Algorithm
*** Scheduler Classes
    + Linux scheduler也是模块化的，分层次的，每个层次使用不同的scheduler，用
      不同的算法来调度不同类型的process
    + CFS是用来调度normal process的，叫做SCHED_NORMAL (POSIX就叫做SCHED_OTHER)
*** Process Scheduling in Unix Systems
    + 传统的Unix System调度的核心有两个
      1) priority 
      2) timeslice
    + 传统priority 和 timeslice的缺点就是process之间微小的差距可能带来巨大的
      调度策略的倾斜，还有为了照顾interactive process会造成新的分配不公
    + 所以CFS其实就是放弃了经典的priority+timeslice，而转用cpu比例来替代
*** Fair Schedulling
    + CFS其实核心思想就是nice value决定了你的CPU proportion的大小。
    + 而且这个CPU proportion相互之间的比例是由差值，而不是绝对值决定的，比
      如，两个process一个nice value是0，另一个是5，分配总共20秒的时间。那么
      分配给他们的时间是15和5。而两个process一个是10，一个是15，那么分配
      给他们的时间同样是15和5
** The Linux Scheduling Implementation
*** Time Accounting
    + 每个process会被分配一个timeslice，系统clock每tick一下，timeslice就减小
      一下，到0的时候，就说明该换process了
*** The Scheduler Entity Structure
    + 在task_struct里面，有个叫做se的scheduler entity structure里面记录了CFS
      需要的结构
      #+begin_src c
        struct sched_entity {
            struct load_weight         load;
            struct rb_node             run_node;
            struct list_head           group_node;
            unsigned int               on_rq;
            u64                        exec_start;
            u64                        sum_exec_runtime;
            u64                        vruntime;
            u64                        prev_sum_exec_runtime;
            u64                        last_wakeup;
            u64                        avg_overlap;
            u64                        nr_migrations;
            u64                        start_runtime;
            u64                        avg_wakeup;
        };
      #+end_src
*** The Virtual Runtime
    + 在理想状态下，我们可以用cpu proportion来代表cpu资源，但是因为各种条
      件的限制，最终还是选择用一个虚拟的时间来代表已经运行了多久
*** Process Selection
    + 既然CFS的哲学就是看vruntime，那么选择vruntime最小的运行是很正常的。CFS选择最小值的办法
      是把所有的可运行的process放在一个红黑树里面。然后找最左边的子节点
    + 红黑树的特点是增删改查都是nlogn, 为了方便查找，经常用一个变量rb_leftmost来cache住
*** Adding Processes to the Tree
    + 其实就是红黑树的插入操作，保持树的平衡么
*** Removing Processes from the Tree
    + 当process 被block住，或者运行结束的时候，要从runable rbtree上进行删除操作
** The Scheduler Entry Point
   + kernel一般就是选择调用schedule()来决定下面调用哪个函数，schedule()的实现也很简单，它就是
     遍历各个scheduler class(我们前面不是说了很多中scheduler来负责调度不同类型的process么)，询
     问那些scheduler类，下一个该被调用的proces
** Sleeping and Waking Up
   + 一旦process进入sleep，那么就要从runable的红黑树中删除，加入到一个wait queue里面
*** Wait Queues
    + wait queue 就是一个链表，每个wait queue就是等待一种event的集合，一旦event发生，那么这个
      queue里面的process就被wake up了
*** Waking Up
    + 一旦一个wait queue的链表上面某个event发生，整个queue就会wake up。但是要注意的是，有时候
      会有错误的wake-up,所以一定要再次检查condition是否满足
** Preemption and Contex Switching
   + 从一个runnable process转到另外一个runnable process是通过context_switch()来实现的，
     context_switch()是被schedule()调用的，主要做了下面两件事:
     - switch_mm() : 更改virtual memory mapping
     - switch_to() : 更改 processor state, stack information
   + 我们在前面的代码中看到，很多代码中都明确的调用了schedule()，但是，如果只有这些schedule()
     运行，那么很多user-space process就会无限制的运行。所以kernel在下面两种情况下都会自动的check
     一下变量need_resched flag，如果为true，就自动触发scheduler
     - 返回user space的时候
     - 从一个interrupt 返回的时候
   + need_resched flag是如下两个函数设置的:
     - scheduler_tick() :当一个process应当被抢占
     - try_to_wake_up() :或者有更高权限的process出现
*** User Preemption
    + 所谓user preemption，就是在如下两者情况下检查need_resched flag:
      - 从system call 返回 user-space的时候 
      - 从interrupt handler返回user-space的时候，
    + 因为这个时候在user-sapce,所以运行current task是安全的，那么选择另外一个
      新的，更合适的task来运行，也是安全的
*** Kernel Preemption
    + 所谓kernel preemption，就是在如下四种情况下检查need_reshced flag:
      - 从interrupt handler 退出，返回kernel-space以前
      - 当kernel code的 preempt_count变成0，也就是说kernel code 重新变成preemptible
        的时候
      - task在kernel显式调用schedule()
      - task在kernel中block住了
    + 普通的Unix在kernel space，是不能抢占的，也就是说，kernel code要么运行完毕返回
      user-space，要么明显的被block住，否则，无法对他们进行抢占
    + Linux是可以抢占kernel code的，但是要保证安全，保证代码没有被锁住，设置了一个
      preempt_count(在thread_info里面)来记录代码被几个锁锁住，一旦preempt_count为0的时候，
      会去检查need_resched flag

